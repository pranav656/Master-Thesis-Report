%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: TU_border_A4_L_front.eps
%%Creator: Adobe Illustrator(R) 13.0
%%For: Ton Persoon
%%CreationDate: 8/19/08
%%BoundingBox: 0 0 859 97
%%HiResBoundingBox: 0 0 858.8975 603.7803
%%CropBox: 0 0 858.8975 603.7803
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 13.0.2
%AI9_PrintingDataBegin
%ADO_BuildNumber: Adobe Illustrator(R) 13.0.2 x434 R agm 4.4379 ct 5.1039
%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources:
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts:
%%DocumentNeededFonts:
%%DocumentNeededFeatures:
%%DocumentSuppliedFeatures:
%%DocumentProcessColors:  Cyan Black
%%DocumentCustomColors:
%%CMYKCustomColor:
%%RGBCustomColor:
%%EndComments






%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf
{load def}bdf
/ddf
{put}bdf
/xddf
{3 -1 roll put}bdf
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2
	ps_level 2 ge
def
/level3
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if
		}
		{
		/DataSource load type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse
	/AGMCORE_avoid_L2_sep_space
		version cvr 2012 lt
		level2 and
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots
		userdict/Adobe_AGM_OnHost_Seps known
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer
		}
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse
						}if
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name
										CSA map_csa
										MappedCSA
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop
		ColorSpaceFamily/Separation eq
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq
		currentdict/Components known and
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def
			}{
				/name xdf
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put
	end
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if
		0 exch rlineto
		currentfile token pop dup type/stringtype eq
			{pop exit}if
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc
	{
	 dup stringwidth 0 0 moveto
	 2 index true charpath pathbbox
	 0 -1
	 7 index 2 div .88
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc
	{
	 dup stringwidth
	 pop 2 div neg -0.88
	2 copy
	moveto
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup
				_setwidthProc
				3 copy
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc
				3 copy
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector
	{
		 dup/FontType get 0 eq
		{
		1 index ct_Type0CopyFont
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse
		 exch
	}
	forall
	pop
	]
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin
		ct_CopyFont
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def
		/ct_SyntheticBold true def
		currentdict
		end
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict
begin
	 /.notdef 0 def
	 currentdict
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{
	/GlyphDirectory
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated.
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup
   length 1 add dict
   begin
		ct_CopyFont
		/Encoding Encoding dup length array copy
		dup
		4 -1 roll
		0 exch put
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph
{
 	gsave
	8 -1 roll pop
	7 1 roll
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse
	dup  9 1 roll
	{
		currentdict /StrokeWidth 2 copy known
		{
			get 2 div
			0 ct_FontMatrix dtransform pop
			5 1 roll
			4 -1 roll 4 index sub
			4 1 roll
			3 -1 roll 4 index sub
			3 1 roll
			exch 4 index add exch
			4 index add
			5 -1 roll pop
		}
		{
			pop pop
		}
		ifelse
	}
    if
	setcachedevice
        ct_FontMatrix concat
        ct_PSPathOps begin
		exec
	end
	{
		currentdict /StrokeWidth 2 copy known
			{ get }
			{ pop pop 0 }
  	    ifelse
		setlinewidth stroke
	}
	{
	    fill
	}
	ifelse
    grestore
} def
/ct_PSPathOps 4 dict dup begin
	/m {moveto} def
	/l {lineto} def
	/c {curveto} def
	/cp {closepath} def
end
def
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc
{
   2 index findfont dup length 4 add dict
   begin
	ct_CopyFont
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def
         currentdict
      end
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore
		ct_MakeGlyphProc
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM
{
556 0 24 -19 541 703
	{
	541 628 m
	510 669 442 703 354 703 c
	201 703 117 607 101 444 c
	50 444 l
	25 372 l
	97 372 l
	97 301 l
	49 301 l
	24 229 l
	103 229 l
	124 67 209 -19 350 -19 c
	435 -19 501 25 509 32 c
	509 131 l
	492 105 417 60 343 60 c
	267 60 204 127 197 229 c
	406 229 l
	430 301 l
	191 301 l
	191 372 l
	455 372 l
	479 444 l
	194 444 l
	201 531 245 624 348 624 c
	433 624 484 583 509 534 c
	cp
	556 0 m
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM
{
500 0 10 -12 484 692
	{
	347 298 m
	171 298 l
	170 310 170 322 170 335 c
	170 362 l
	362 362 l
	374 403 l
	172 403 l
	184 580 244 642 308 642 c
	380 642 434 574 457 457 c
	481 462 l
	474 691 l
	449 691 l
	433 670 429 657 410 657 c
	394 657 360 692 299 692 c
	204 692 94 604 73 403 c
	22 403 l
	10 362 l
	70 362 l
	69 352 69 341 69 330 c
	69 319 69 308 70 298 c
	22 298 l
	10 257 l
	73 257 l
	97 57 216 -12 295 -12 c
	364 -12 427 25 484 123 c
	458 142 l
	425 101 384 37 316 37 c
	256 37 189 84 173 257 c
	335 257 l
	cp
	500 0 m
	}
ct_PSBuildGlyph
} def
end
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{
								MultipleDataSources NComponents AGMIMG_&colorimage
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and
		Name()ne and
		Name(All)ne and
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys
								}{
								currentoverprint not
									{
 									gsave
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint
					MappedCSA 0 get/DeviceCMYK eq and
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata
						}ifelse
 					}ifelse
				}
				{
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys
							}{
							currentoverprint not
								{
	 							gsave
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{
			currentcmykcolor
			/AGMIMG_k xdf
			/AGMIMG_y xdf
			/AGMIMG_m xdf
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor
			}{
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if
						}
					]
					255
					{
						255 div
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for
			put	setcolorspace
		}if
		currentdict
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get
			255 exch sub
			2 index
			3 1 roll
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage
		end
	}def
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf
					Adobe_AGM_Image/AGMIMG_y xddf
					Adobe_AGM_Image/AGMIMG_m xddf
					Adobe_AGM_Image/AGMIMG_c xddf
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf
				Adobe_AGM_Image/AGMIMG_y xddf
				Adobe_AGM_Image/AGMIMG_m xddf
				Adobe_AGM_Image/AGMIMG_c xddf
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where
{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse
{ userdict /AI11_PDFMark5 /cleartomark load put
userdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}
{ userdict /AI11_PDFMark5 /pdfmark load put
userdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse
[/NamespacePush AI11_PDFMark5
[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5
[{ai_metadata_stream_123}
currentfile 0 (%  &&end XMP packet marker&&)
/SubFileDecode filter AI11_ReadMetadata_PDFMark5
<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.1-c036 46.277092, Fri Feb 23 2007 14:16:18        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">TU_border_A4_portret_front</rdf:li>
            </rdf:Alt>
         </dc:title>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS3</xap:CreatorTool>
         <xap:CreateDate>2008-05-29T00:27:27+02:00</xap:CreateDate>
         <xap:ModifyDate>2008-08-19T12:11:12+02:00</xap:ModifyDate>
         <xap:MetadataDate>2008-08-19T12:11:12+02:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>180</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAtAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq&#xA;7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq&#xA;7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq&#xA;7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FUN+lNM/5a4f+Rif1xV36U0z&#xA;/lrh/wCRif1xV36U0z/lrh/5GJ/XFXfpTTP+WuH/AJGJ/XFXfpTTP+WuH/kYn9cVd+lNM/5a4f8A&#xA;kYn9cVd+lNM/5a4f+Rif1xV36U0z/lrh/wCRif1xV36U0z/lrh/5GJ/XFXfpTTP+WuH/AJGJ/XFX&#xA;fpTTP+WuH/kYn9cVd+lNM/5a4f8AkYn9cVd+lNM/5a4f+Rif1xV36U0z/lrh/wCRif1xV36U0z/l&#xA;rh/5GJ/XFXfpTTP+WuH/AJGJ/XFXfpTTP+WuH/kYn9cVd+lNM/5a4f8AkYn9cVd+lNM/5a4f+Rif&#xA;1xV36U0z/lrh/wCRif1xV36U0z/lrh/5GJ/XFXfpTTP+WuH/AJGJ/XFXfpTTP+WuH/kYn9cVd+lN&#xA;M/5a4f8AkYn9cVd+lNM/5a4f+Rif1xV36U0z/lrh/wCRif1xV36U0z/lrh/5GJ/XFXfpTTP+WuH/&#xA;AJGJ/XFXfpTTP+WuH/kYn9cVd+lNM/5a4f8AkYn9cVd+lNM/5a4f+Rif1xV36U0z/lrh/wCRif1x&#xA;VE4q7FXYq8q8x+fvOUv5jab5f0YWkPllp+Oo6pHLFJclIokllb95WKGOsnp7qzMysFockIk7BEpA&#xA;Cy9MudU0y1Dm5vIIBGVWQySInEuKqG5EULAbYDE1aBIE1e4VRcW5t/rAlQ25T1PW5DhwpXly6Upv&#xA;XAyaS7tZHkRJkd4QDMqsCUDDkvIA7VG4rirobq1nLCGZJSoUsEYNQMKrWh7jcYqq4q7FXYq7FXYq&#xA;7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FUq/xZ5V/6vNj/ANJMP/NWZH5TL/Ml&#xA;8i4f8oaf/VIf6Yfrd/izyr/1ebH/AKSYf+asfymX+ZL5Ff5Q0/8AqkP9MP1u/wAWeVf+rzY/9JMP&#xA;/NWP5TL/ADJfIr/KGn/1SH+mH63lF75O8s3HmDz1eW95odrHrcOmjRJxNbBklt1c3X2fij9VioYj&#xA;7XU1zK0WPJiyxmYSoeRcLtHPgz4JYxkxgmv4h0IPerTLcT6lJr95caNcXlxqNlczaUuoQCP0rWzn&#xA;tmPOSq/E06mm+W6vETCEIRmRC9zE9TbToNTCOSeTJPGDPh2Ex/CKSM+W/MiM9rD5q0230aSx1Dhp&#xA;VrqaJaQy30t5IbT0SoWWNVuYVR2AK8Ph4jY4H5TL/Ml8i7P+UNP/AKpD/TD9ae6HoWkad5ht9QbV&#xA;rQxS3Oom9K6tWiXcUKwyek0hjfj6TKVp/L4bP5XL/Ml8iv8AKGn/ANUh/ph+tC6PFrGjpONK1LTb&#xA;FrhladodQ0pPUKrUMwWyDHi7Mact96nc1fymX+ZL5Ff5Q0/+qQ/0w/W9F8teaNNXSkk1jWrQajOz&#xA;SzQve2svpcjRYleFYEZVUD9j51O+P5TL/Ml8iv8AKGn/ANUh/ph+tNf8WeVf+rzY/wDSTD/zVj+U&#xA;y/zJfIr/AChp/wDVIf6Yfrd/izyr/wBXmx/6SYf+asfymX+ZL5Ff5Q0/+qQ/0w/W7/FnlX/q82P/&#xA;AEkw/wDNWP5TL/Ml8iv8oaf/AFSH+mH63f4s8q/9Xmx/6SYf+asfymX+ZL5Ff5Q0/wDqkP8ATD9b&#xA;v8WeVf8Aq82P/STD/wA1Y/lMv8yXyK/yhp/9Uh/ph+t3+LPKv/V5sf8ApJh/5qx/KZf5kvkV/lDT&#xA;/wCqQ/0w/W7/ABZ5V/6vNj/0kw/81Y/lMv8AMl8iv8oaf/VIf6Yfrd/izyr/ANXmx/6SYf8AmrH8&#xA;pl/mS+RX+UNP/qkP9MP1u/xZ5V/6vNj/ANJMP/NWP5TL/Ml8iv8AKGn/ANUh/ph+t3+LPKv/AFeb&#xA;H/pJh/5qx/KZf5kvkV/lDT/6pD/TD9bv8WeVf+rzY/8ASTD/AM1Y/lMv8yXyK/yhp/8AVIf6Yfrd&#xA;/izyr/1ebH/pJh/5qx/KZf5kvkV/lDT/AOqQ/wBMP1u/xZ5V/wCrzY/9JMP/ADVj+Uy/zJfIr/KG&#xA;n/1SH+mH63f4s8q/9Xmx/wCkmH/mrH8pl/mS+RX+UNP/AKpD/TD9bv8AFnlX/q82P/STD/zVj+Uy&#xA;/wAyXyK/yhp/9Uh/ph+t3+LPKv8A1ebH/pJh/wCasfymX+ZL5Ff5Q0/+qQ/0w/W7/FnlX/q82P8A&#xA;0kw/81Y/lMv8yXyK/wAoaf8A1SH+mH63f4s8q/8AV5sf+kmH/mrH8pl/mS+RX+UNP/qkP9MP1u/x&#xA;Z5V/6vNj/wBJMP8AzVj+Uy/zJfIr/KGn/wBUh/ph+t3+LPKv/V5sf+kmH/mrH8pl/mS+RX+UNP8A&#xA;6pD/AEw/W7/FnlX/AKvNj/0kw/8ANWP5TL/Ml8iv8oaf/VIf6Yfrd/izyr/1ebH/AKSYf+asfymX&#xA;+ZL5Ff5Q0/8AqkP9MP1u/wAWeVf+rzY/9JMP/NWP5TL/ADJfIr/KGn/1SH+mH63yj6L+K/8ABr/X&#xA;O9t80t3ov4r/AMGv9cbW3ei/iv8Awa/1xtbd6L+K/wDBr/XG1t3ov4r/AMGv9cbW3ei/iv8Awa/1&#xA;xtbbELV6r/wa/wBcbW2Tpqnkmod/Lzlgaemt/RCpLHupbkOQHWm3Txwjiz/z/wDYucM+n64j/pz+&#xA;pRmuPJDW116Wl3UdywZbOt5GyJUPxd/hBNGK1XuB18ZCOexchXX0oOXT0ahK+nq9+/L3bfb33cah&#xA;5PknEkOhvCh+F4hfclCmNlqnIcuYYqwqSNum+MceYDed/wCaiebATYxkD+se73c+vUbcllzeeT5I&#xA;JVg0aWCdo2WJxfK6pJwIVuLJUjn8TDl8qYxhmB3mCP6v7VlmwEGsZB/reX9Xv82P+i/iv/Br/XMu&#xA;3Dt3ov4r/wAGv9cbW3ei/iv/AAa/1xtbd6L+K/8ABr/XG1t3ov4r/wAGv9cbW3ei/iv/AAa/1xtb&#xA;d6L+K/8ABr/XG1t3ov4r/wAGv9cbW3ei/iv/AAa/1xtbd6L+K/8ABr/XG1t3ov4r/wAGv9cbW3ei&#xA;/iv/AAa/1xtbd6L+K/8ABr/XG1t3ov4r/wAGv9cbW3ei/iv/AAa/1xtbd6L+K/8ABr/XG1t3ov4r&#xA;/wAGv9cbW3ei/iv/AAa/1xtbd6L+K/8ABr/XG1t3ov4r/wAGv9cbW3ei/iv/AAa/1xtbWYUuxV2K&#xA;uxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV//Z</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#">
         <xapMM:DocumentID>uuid:17F233852EA511DD9334AFC474BF3C2A</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:6FADA72A7A6FDD11945BB1F3A87A8CA7</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:B4DD54592EA111DD9334AFC474BF3C2A</stRef:instanceID>
            <stRef:documentID>uuid:B4DD54572EA111DD9334AFC474BF3C2A</stRef:documentID>
         </xapMM:DerivedFrom>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xapG="http://ns.adobe.com/xap/1.0/g/">
         <xapTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>297.000002</stDim:w>
            <stDim:h>209.999994</stDim:h>
            <stDim:unit>Millimeters</stDim:unit>
         </xapTPg:MaxPageSize>
         <xapTPg:NPages>1</xapTPg:NPages>
         <xapTPg:HasVisibleTransparency>False</xapTPg:HasVisibleTransparency>
         <xapTPg:HasVisibleOverprint>False</xapTPg:HasVisibleOverprint>
         <xapTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xapTPg:PlateNames>
         <xapTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Default Swatch Group</xapG:groupName>
                  <xapG:groupType>0</xapG:groupType>
                  <xapG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>White</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>Black</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>100.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>Cyan</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>100.000000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                     </rdf:Seq>
                  </xapG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xapTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>





















<?xpacket end="w"?>
%  &&end XMP packet marker&&
[{ai_metadata_stream_123}
<</Type /Metadata /Subtype /XML>>
/PUT AI11_PDFMark5
[/Document
1 dict begin /Metadata {ai_metadata_stream_123} def
currentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -603.78 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 603.78 li
858.897 603.78 li
858.897 0 li
cp
clp
[1 0 0 1 0 0 ]ct
0 603.78 mo
858.897 603.78 li
858.897 508.819 li
0 508.819 li
0 603.78 li
0 603.78 li
cp
false sop
/0
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
f
0 603.779 mo
858.897 603.779 li
858.897 561.26 li
0 561.26 li
0 603.779 li
0 603.779 li
cp
0 0.6509803921568627451 0.8392156862745098039 rgb
f
0.5 lw
0 lc
0 lj
4 ml
[] 0 dsh
true sadj
0 585.354 mo
858.897 585.354 li
0 0 0 0 cmyk
@
188.426 535.302 mo
190.054 535.302 190.981 536.141 190.981 537.783 cv
190.981 539.425 190.054 540.263 188.426 540.263 cv
187.086 540.263 li
187.086 535.302 li
188.426 535.302 li
188.426 535.302 li
cp
188.536 539.851 mo
189.93 539.851 190.501 539.033 190.501 537.783 cv
190.501 536.319 189.641 535.673 188.233 535.715 cv
187.533 535.715 li
187.533 539.851 li
188.536 539.851 li
188.536 539.851 li
cp
0 0 0 1 cmyk
f
192.012 538.635 mo
192.025 539.37 192.363 539.988 193.208 539.988 cv
193.695 539.988 194.101 539.639 194.203 539.163 cv
194.636 539.163 li
194.424 539.988 193.908 540.366 193.077 540.366 cv
192.047 540.366 191.565 539.479 191.565 538.538 cv
191.565 537.604 192.08 536.711 193.105 536.711 cv
194.259 536.711 194.678 537.557 194.678 538.635 cv
192.012 538.635 li
192.012 538.635 li
cp
194.231 538.257 mo
194.184 537.59 193.826 537.089 193.112 537.089 cv
192.438 537.089 192.08 537.652 192.025 538.257 cv
194.231 538.257 li
194.231 538.257 li
cp
f
195.832 540.262 mo
195.419 540.262 li
195.419 535.301 li
195.832 535.301 li
195.832 540.262 li
195.832 540.262 li
cp
f
197.149 540.262 mo
197.149 537.191 li
196.455 537.191 li
196.455 536.813 li
197.149 536.813 li
197.149 536.078 li
197.149 535.486 197.389 535.219 197.98 535.219 cv
198.111 535.219 198.248 535.268 198.372 535.294 cv
198.372 535.624 li
198.29 535.61 198.201 535.597 198.118 535.597 cv
197.555 535.597 197.541 535.879 197.561 536.373 cv
197.561 536.813 li
198.345 536.813 li
198.345 537.191 li
197.561 537.191 li
197.561 540.262 li
197.149 540.262 li
197.149 540.262 li
cp
f
199.316 537.191 mo
198.629 537.191 li
198.629 536.813 li
199.316 536.813 li
199.316 536.078 li
199.728 535.899 li
199.728 536.813 li
200.512 536.813 li
200.512 537.191 li
199.728 537.191 li
199.728 539.5 li
199.721 539.815 199.886 539.987 200.201 539.987 cv
200.326 539.987 200.45 539.98 200.559 539.946 cv
200.559 540.304 li
200.429 540.338 200.278 540.365 200.14 540.365 cv
199.267 540.365 199.316 539.809 199.316 539.341 cv
199.316 537.191 li
199.316 537.191 li
cp
f
187.533 542.389 mo
187.533 545.597 li
187.567 546.498 188.082 547.04 188.899 547.04 cv
189.717 547.04 190.232 546.498 190.267 545.597 cv
190.267 542.389 li
190.713 542.389 li
190.713 545.604 li
190.7 546.669 190.102 547.452 188.899 547.452 cv
187.697 547.452 187.1 546.669 187.086 545.604 cv
187.086 542.389 li
187.533 542.389 li
187.533 542.389 li
cp
f
192.005 547.35 mo
191.593 547.35 li
191.593 544.676 li
191.593 544.409 191.572 544.134 191.558 543.9 cv
191.984 543.9 li
192.005 544.409 li
192.018 544.423 li
192.259 543.996 192.651 543.798 193.097 543.798 cv
194.223 543.798 194.313 544.794 194.313 545.192 cv
194.313 547.35 li
193.901 547.35 li
193.901 545.123 li
193.901 544.525 193.557 544.175 192.994 544.175 cv
192.314 544.175 192.005 544.745 192.005 545.363 cv
192.005 547.35 li
192.005 547.35 li
cp
f
195.688 542.903 mo
195.206 542.903 li
195.206 542.389 li
195.688 542.389 li
195.688 542.903 li
195.688 542.903 li
cp
195.653 543.9 mo
195.653 547.35 li
195.241 547.35 li
195.241 543.9 li
195.653 543.9 li
195.653 543.9 li
cp
f
196.759 543.9 mo
197.948 546.779 li
199.096 543.9 li
199.549 543.9 li
198.181 547.35 li
197.714 547.35 li
196.306 543.9 li
196.759 543.9 li
196.759 543.9 li
cp
f
200.263 545.721 mo
200.277 546.456 200.614 547.074 201.459 547.074 cv
201.947 547.074 202.352 546.725 202.455 546.25 cv
202.887 546.25 li
202.675 547.074 202.16 547.452 201.328 547.452 cv
200.298 547.452 199.816 546.565 199.816 545.625 cv
199.816 544.69 200.331 543.798 201.355 543.798 cv
202.51 543.798 202.929 544.643 202.929 545.721 cv
200.263 545.721 li
200.263 545.721 li
cp
202.483 545.343 mo
202.435 544.676 202.077 544.175 201.363 544.175 cv
200.689 544.175 200.331 544.738 200.277 545.343 cv
202.483 545.343 li
202.483 545.343 li
cp
f
204.117 547.35 mo
203.706 547.35 li
203.706 544.676 li
203.712 544.409 203.684 544.134 203.671 543.9 cv
204.096 543.9 li
204.117 544.409 li
204.131 544.409 li
204.255 544.058 204.564 543.811 204.908 543.798 cv
205.046 543.79 205.183 543.798 205.32 543.804 cv
205.32 544.202 li
205.238 544.195 205.148 544.175 205.066 544.175 cv
204.454 544.175 204.131 544.614 204.117 545.274 cv
204.117 547.35 li
204.117 547.35 li
cp
f
207.003 543.798 mo
207.657 543.798 208.205 544.023 208.261 544.752 cv
207.814 544.752 li
207.773 544.319 207.388 544.175 206.962 544.175 cv
206.577 544.175 206.185 544.326 206.185 544.731 cv
206.185 545.24 206.851 545.192 207.786 545.521 cv
208.144 545.646 208.37 545.955 208.37 546.326 cv
208.37 547.103 207.649 547.452 206.921 547.452 cv
206.323 547.452 205.636 547.171 205.622 546.408 cv
206.068 546.408 li
206.103 546.924 206.556 547.074 207.024 547.074 cv
207.463 547.074 207.924 546.869 207.924 546.387 cv
207.924 545.893 207.381 545.811 206.831 545.687 cv
206.288 545.556 205.739 545.398 205.739 544.759 cv
205.739 544.045 206.398 543.798 207.003 543.798 cv
207.003 543.798 li
cp
f
209.615 542.903 mo
209.134 542.903 li
209.134 542.389 li
209.615 542.389 li
209.615 542.903 li
209.615 542.903 li
cp
209.58 543.9 mo
209.58 547.35 li
209.168 547.35 li
209.168 543.9 li
209.58 543.9 li
209.58 543.9 li
cp
f
210.987 544.278 mo
210.3 544.278 li
210.3 543.9 li
210.987 543.9 li
210.987 543.165 li
211.399 542.986 li
211.399 543.9 li
212.183 543.9 li
212.183 544.278 li
211.399 544.278 li
211.399 546.587 li
211.392 546.902 211.557 547.074 211.873 547.074 cv
211.997 547.074 212.121 547.067 212.231 547.033 cv
212.231 547.391 li
212.1 547.425 211.949 547.452 211.812 547.452 cv
210.939 547.452 210.987 546.896 210.987 546.429 cv
210.987 544.278 li
210.987 544.278 li
cp
f
213.185 543.9 mo
214.346 546.786 li
215.501 543.9 li
215.947 543.9 li
214.044 548.668 li
213.591 548.668 li
214.113 547.35 li
212.684 543.9 li
213.185 543.9 li
213.185 543.9 li
cp
f
221.436 545.625 mo
221.436 546.531 220.928 547.452 219.828 547.452 cv
218.728 547.452 218.221 546.531 218.221 545.625 cv
218.221 544.718 218.728 543.798 219.828 543.798 cv
220.928 543.798 221.436 544.718 221.436 545.625 cv
221.436 545.625 li
cp
219.828 544.175 mo
218.997 544.175 218.667 544.986 218.667 545.625 cv
218.667 546.264 218.997 547.074 219.828 547.074 cv
220.659 547.074 220.989 546.264 220.989 545.625 cv
220.989 544.986 220.659 544.175 219.828 544.175 cv
219.828 544.175 li
cp
f
222.397 547.35 mo
222.397 544.278 li
221.703 544.278 li
221.703 543.9 li
222.397 543.9 li
222.397 543.165 li
222.397 542.574 222.638 542.306 223.229 542.306 cv
223.36 542.306 223.497 542.354 223.62 542.382 cv
223.62 542.711 li
223.539 542.698 223.449 542.685 223.366 542.685 cv
222.803 542.685 222.79 542.966 222.81 543.46 cv
222.81 543.9 li
223.593 543.9 li
223.593 544.278 li
222.81 544.278 li
222.81 547.35 li
222.397 547.35 li
222.397 547.35 li
cp
f
188.687 549.888 mo
187.086 549.888 li
187.086 549.475 li
190.714 549.475 li
190.714 549.888 li
189.14 549.888 li
189.14 554.436 li
188.687 554.436 li
188.687 549.888 li
188.687 549.888 li
cp
f
190.673 552.808 mo
190.687 553.543 191.024 554.161 191.869 554.161 cv
192.357 554.161 192.762 553.812 192.866 553.337 cv
193.298 553.337 li
193.085 554.161 192.57 554.539 191.739 554.539 cv
190.708 554.539 190.226 553.652 190.226 552.712 cv
190.226 551.777 190.742 550.884 191.766 550.884 cv
192.92 550.884 193.339 551.729 193.339 552.808 cv
190.673 552.808 li
190.673 552.808 li
cp
192.893 552.43 mo
192.845 551.763 192.488 551.262 191.773 551.262 cv
191.099 551.262 190.742 551.825 190.687 552.43 cv
192.893 552.43 li
192.893 552.43 li
cp
f
196.355 552.045 mo
196.321 551.516 195.984 551.262 195.414 551.262 cv
194.782 551.262 194.39 551.922 194.39 552.705 cv
194.39 553.495 194.782 554.161 195.414 554.161 cv
195.95 554.161 196.321 553.831 196.355 553.357 cv
196.802 553.357 li
196.692 554.147 196.238 554.539 195.454 554.539 cv
194.424 554.539 193.944 553.652 193.944 552.712 cv
193.944 551.777 194.459 550.884 195.483 550.884 cv
196.19 550.884 196.768 551.311 196.802 552.045 cv
196.355 552.045 li
196.355 552.045 li
cp
f
197.894 551.51 mo
197.908 551.51 li
198.148 551.083 198.54 550.884 198.987 550.884 cv
200.113 550.884 200.202 551.88 200.202 552.279 cv
200.202 554.436 li
199.79 554.436 li
199.79 552.21 li
199.79 551.612 199.447 551.262 198.884 551.262 cv
198.203 551.262 197.894 551.832 197.894 552.45 cv
197.894 554.436 li
197.482 554.436 li
197.482 549.475 li
197.894 549.475 li
197.894 551.51 li
197.894 551.51 li
cp
f
201.432 554.436 mo
201.02 554.436 li
201.02 551.763 li
201.02 551.496 200.999 551.221 200.986 550.987 cv
201.412 550.987 li
201.432 551.496 li
201.446 551.51 li
201.687 551.083 202.079 550.884 202.525 550.884 cv
203.651 550.884 203.741 551.88 203.741 552.279 cv
203.741 554.436 li
203.328 554.436 li
203.328 552.21 li
203.328 551.612 202.985 551.262 202.422 551.262 cv
201.741 551.262 201.432 551.832 201.432 552.45 cv
201.432 554.436 li
201.432 554.436 li
cp
f
207.719 552.712 mo
207.719 553.618 207.21 554.539 206.111 554.539 cv
205.011 554.539 204.503 553.618 204.503 552.712 cv
204.503 551.805 205.011 550.884 206.111 550.884 cv
207.21 550.884 207.719 551.805 207.719 552.712 cv
207.719 552.712 li
cp
206.111 551.262 mo
205.28 551.262 204.95 552.072 204.95 552.712 cv
204.95 553.351 205.28 554.161 206.111 554.161 cv
206.942 554.161 207.272 553.351 207.272 552.712 cv
207.272 552.072 206.942 551.262 206.111 551.262 cv
206.111 551.262 li
cp
f
208.836 554.436 mo
208.424 554.436 li
208.424 549.475 li
208.836 549.475 li
208.836 554.436 li
208.836 554.436 li
cp
f
212.774 552.712 mo
212.774 553.618 212.265 554.539 211.166 554.539 cv
210.066 554.539 209.559 553.618 209.559 552.712 cv
209.559 551.805 210.066 550.884 211.166 550.884 cv
212.265 550.884 212.774 551.805 212.774 552.712 cv
212.774 552.712 li
cp
211.166 551.262 mo
210.335 551.262 210.005 552.072 210.005 552.712 cv
210.005 553.351 210.335 554.161 211.166 554.161 cv
211.997 554.161 212.327 553.351 212.327 552.712 cv
212.327 552.072 211.997 551.262 211.166 551.262 cv
211.166 551.262 li
cp
f
216.013 550.987 mo
216.441 550.987 li
216.426 551.221 216.406 551.496 216.406 551.763 cv
216.406 553.831 li
216.406 554.519 216.441 555.24 215.677 555.598 cv
215.403 555.729 215.217 555.755 214.894 555.755 cv
214.269 555.755 213.527 555.543 213.527 554.827 cv
213.974 554.827 li
214.022 555.24 214.51 555.377 214.949 555.377 cv
215.486 555.377 215.98 554.999 215.994 554.423 cv
215.994 553.776 li
215.98 553.776 li
215.781 554.183 215.306 554.423 214.86 554.423 cv
213.822 554.423 213.376 553.633 213.376 552.684 cv
213.376 551.749 213.795 550.884 214.846 550.884 cv
215.347 550.884 215.705 551.125 215.98 551.522 cv
215.994 551.496 li
216.013 550.987 li
216.013 550.987 li
cp
214.887 551.262 mo
214.138 551.262 213.822 552.018 213.822 552.65 cv
213.822 553.281 214.145 554.045 214.901 554.045 cv
215.691 554.045 215.994 553.31 215.994 552.636 cv
215.994 551.977 215.63 551.262 214.887 551.262 cv
214.887 551.262 li
cp
f
217.457 550.987 mo
218.618 553.873 li
219.772 550.987 li
220.219 550.987 li
218.315 555.755 li
217.863 555.755 li
218.385 554.436 li
216.955 550.987 li
217.457 550.987 li
217.457 550.987 li
cp
f
111.023 551.12 mo
113.515 551.12 114.869 549.466 114.869 547.144 cv
114.869 535.302 li
120.169 535.302 li
120.169 547.408 li
120.117 552.737 115.848 554.83 111.023 554.83 cv
106.198 554.83 101.929 552.737 101.876 547.408 cv
101.876 535.302 li
107.177 535.302 li
107.177 547.144 li
107.177 549.466 108.531 551.12 111.023 551.12 cv
111.023 551.12 li
cp
0 0.6509803921568627451 0.8392156862745098039 rgb
f
146.143 546.51 mo
146.161 544.435 147.417 542.56 149.513 542.56 cv
151.951 542.56 152.904 544.23 152.904 546.51 cv
146.143 546.51 li
146.143 546.51 li
cp
155.557 548.26 mo
155.557 547.013 li
155.557 543.329 153.471 540.729 149.697 540.729 cv
145.483 540.729 143.52 543.991 143.52 547.888 cv
143.52 551.812 145.218 554.833 149.486 554.833 cv
152.667 554.833 155 553.323 155.398 550.301 cv
152.748 550.301 li
152.455 552.235 151.475 553.004 149.513 553.004 cv
146.94 553.004 146.086 550.716 146.086 548.26 cv
155.557 548.26 li
155.557 548.26 li
cp
0 0 0 1 cmyk
f
161.131 535.302 mo
158.611 535.302 li
158.611 554.437 li
161.131 554.437 li
161.131 535.302 li
161.131 535.302 li
cp
f
88.1431 554.436 mo
93.4438 554.436 li
93.4438 539.015 li
99.3823 539.015 li
99.3823 535.303 li
82.2046 535.303 li
82.2046 539.015 li
88.1431 539.015 li
88.1431 554.436 li
88.1431 554.436 li
cp
f
100.876 525.985 mo
99.5835 526.392 98.2495 526.066 98.2534 524.337 cv
98.2554 521.701 104.446 519.491 105.304 517.188 cv
105.517 516.613 105.53 516.141 105.255 516.155 cv
105.058 516.167 105.212 516.453 104.779 516.888 cv
102.214 519.453 97.9175 519.449 94.6206 520.926 cv
92.4585 521.896 86.1226 524.878 87.5815 531.528 cv
87.6509 531.844 87.8394 532.902 88.0327 532.902 cv
88.2573 532.902 88.2554 532.273 88.2495 531.51 cv
88.2007 527.55 92.8901 526.445 94.4155 523.858 cv
94.5981 523.549 94.9136 523.115 94.9888 523.316 cv
95.0249 523.414 95.0015 523.558 94.9399 523.833 cv
94.4624 525.959 92.2388 527.323 92.8687 528.843 cv
93.6851 530.815 96.0425 529.345 96.7661 528.077 cv
96.9604 527.728 97.0688 527.505 97.1987 527.55 cv
97.2964 527.584 97.2925 527.984 97.2319 528.345 cv
96.8452 530.633 96.3188 531.918 94.644 533.22 cv
94.1089 533.637 93.2661 533.724 93.3765 534.044 cv
93.4048 534.127 93.7681 534.118 94.0571 534.089 cv
98.5161 533.804 102.246 528.546 103.234 525.111 cv
103.337 524.87 103.369 524.643 103.259 524.558 cv
103.125 524.454 102.929 524.692 102.73 524.869 cv
102.22 525.316 101.521 525.783 100.876 525.985 cv
100.876 525.985 li
cp
f
169.026 554.436 mo
169.026 542.885 li
172.098 542.885 li
172.098 541.133 li
169.026 541.133 li
169.026 538.984 li
169.026 537.446 169.766 537.183 171.2 537.183 cv
171.622 537.183 172.047 537.237 172.471 537.261 cv
172.471 535.17 li
171.881 535.036 171.28 534.904 170.668 534.904 cv
168.284 534.904 166.506 536.1 166.506 538.646 cv
166.506 541.133 li
163.911 541.133 li
163.911 542.885 li
166.506 542.885 li
166.506 554.436 li
169.026 554.436 li
169.026 554.436 li
cp
f
173.546 541.133 mo
173.546 542.885 li
175.826 542.885 li
175.826 551.362 li
175.826 553.133 175.851 554.833 179.592 554.833 cv
180.174 554.833 180.721 554.778 181.313 554.675 cv
181.313 552.74 li
180.904 552.839 180.386 552.899 179.988 552.899 cv
179.086 552.899 178.346 552.446 178.346 551.495 cv
178.346 542.885 li
181.42 542.885 li
181.42 541.133 li
178.346 541.133 li
178.346 537.502 li
175.826 538.297 li
175.826 541.135 li
173.546 541.133 li
173.546 541.133 li
cp
f
125.47 554.436 mo
132.043 554.436 li
140.227 554.436 141.086 547.51 141.086 544.87 cv
141.086 542.231 140.227 535.302 132.043 535.302 cv
125.47 535.302 li
125.47 554.436 li
125.47 554.436 li
cp
128.125 537.58 mo
132.044 537.58 li
136.467 537.58 138.302 540.917 138.302 544.87 cv
138.302 548.824 136.467 552.158 132.044 552.158 cv
128.125 552.158 li
128.125 537.58 li
128.125 537.58 li
cp
f
287.944 574.461 mo
287.978 573.812 288.274 573.218 288.989 573.218 cv
289.935 573.218 289.957 574.207 289.957 574.461 cv
287.944 574.461 li
287.944 574.461 li
cp
291.618 575.483 mo
291.64 575.021 291.662 574.207 291.288 573.448 cv
290.782 572.414 289.836 572.107 289.044 572.107 cv
288.439 572.107 287.911 572.282 287.482 572.568 cv
286.547 573.218 286.327 574.296 286.327 575.197 cv
286.327 576.089 286.536 576.837 287.042 577.364 cv
287.625 577.97 288.527 578.058 289 578.058 cv
289.814 578.058 290.54 577.838 290.947 577.408 cv
291.398 576.936 291.453 576.463 291.475 576.198 cv
289.99 576.198 li
289.836 576.814 289.429 576.969 289.022 576.969 cv
287.889 576.969 287.889 575.847 287.889 575.483 cv
291.618 575.483 li
291.618 575.483 li
cp
282.631 577.849 mo
284.259 577.849 li
284.259 575.109 li
284.259 574.417 284.358 573.569 286.008 573.725 cv
286.008 572.261 li
284.688 572.195 284.325 572.865 284.116 573.339 cv
284.083 572.271 li
282.554 572.271 li
282.587 572.592 282.631 573.394 282.631 573.657 cv
282.631 577.849 li
282.631 577.849 li
cp
275.855 572.295 mo
275.855 575.747 li
275.855 576.022 275.855 576.792 276.218 577.243 cv
276.526 577.65 277.142 577.991 277.89 577.991 cv
278.946 577.991 279.364 577.354 279.529 577.111 cv
279.584 577.849 li
281.168 577.849 li
281.146 577.694 281.135 577.596 281.125 577.441 cv
281.125 577.299 281.113 577.155 281.091 575.956 cv
281.091 572.295 li
279.419 572.295 li
279.419 575.099 li
279.419 576.045 279.419 576.825 278.374 576.825 cv
277.505 576.825 277.505 576.089 277.505 575.604 cv
277.505 572.295 li
275.855 572.295 li
275.855 572.295 li
cp
275.063 576.704 mo
274.865 576.727 274.755 576.737 274.513 576.737 cv
273.787 576.737 273.787 576.419 273.776 575.912 cv
273.776 573.404 li
275.096 573.404 li
275.096 572.326 li
273.776 572.326 li
273.776 570.644 li
272.159 571.237 li
272.159 572.326 li
271.092 572.326 li
271.092 573.404 li
272.159 573.404 li
272.159 576.451 li
272.159 576.913 272.159 577.947 273.798 577.947 cv
274.063 577.947 274.535 577.914 275.063 577.771 cv
275.063 576.704 li
275.063 576.704 li
cp
265.021 572.295 mo
265.021 575.747 li
265.021 576.022 265.021 576.792 265.384 577.243 cv
265.692 577.65 266.308 577.991 267.056 577.991 cv
268.112 577.991 268.53 577.354 268.695 577.111 cv
268.75 577.849 li
270.334 577.849 li
270.313 577.694 270.301 577.596 270.29 577.441 cv
270.29 577.299 270.279 577.155 270.257 575.956 cv
270.257 572.295 li
268.585 572.295 li
268.585 575.099 li
268.585 576.045 268.585 576.825 267.54 576.825 cv
266.671 576.825 266.671 576.089 266.671 575.604 cv
266.671 572.295 li
265.021 572.295 li
265.021 572.295 li
cp
261.523 577.849 mo
263.14 577.849 li
263.14 573.448 li
264.174 573.448 li
264.174 572.295 li
263.14 572.295 li
263.14 571.645 li
263.14 571.359 263.14 570.92 263.976 570.92 cv
264.108 570.92 264.152 570.931 264.317 570.951 cv
264.317 569.818 li
263.855 569.764 263.547 569.764 263.438 569.764 cv
261.854 569.764 261.523 570.556 261.523 571.534 cv
261.523 572.295 li
260.698 572.295 li
260.698 573.448 li
261.523 573.448 li
261.523 577.849 li
261.523 577.849 li
cp
254.153 574.461 mo
254.187 573.812 254.483 573.218 255.198 573.218 cv
256.145 573.218 256.167 574.207 256.167 574.461 cv
254.153 574.461 li
254.153 574.461 li
cp
257.827 575.483 mo
257.849 575.021 257.871 574.207 257.497 573.448 cv
256.991 572.414 256.045 572.107 255.253 572.107 cv
254.648 572.107 254.12 572.282 253.691 572.568 cv
252.756 573.218 252.536 574.296 252.536 575.197 cv
252.536 576.089 252.745 576.837 253.251 577.364 cv
253.834 577.97 254.736 578.058 255.209 578.058 cv
256.023 578.058 256.75 577.838 257.156 577.408 cv
257.607 576.936 257.662 576.463 257.684 576.198 cv
256.199 576.198 li
256.045 576.814 255.638 576.969 255.231 576.969 cv
254.098 576.969 254.098 575.847 254.098 575.483 cv
257.827 575.483 li
257.827 575.483 li
cp
246.112 577.849 mo
247.751 577.849 li
247.74 574.449 li
247.74 573.581 248.323 573.316 248.785 573.316 cv
249.698 573.316 249.698 574.207 249.698 574.526 cv
249.698 577.849 li
251.315 577.849 li
251.315 574.472 li
251.315 573.745 251.15 573.239 250.952 572.965 cv
250.688 572.623 250.16 572.217 249.335 572.217 cv
248.323 572.217 247.916 572.789 247.729 573.053 cv
247.729 569.906 li
246.112 569.906 li
246.112 577.849 li
246.112 577.849 li
cp
245.056 576.704 mo
244.858 576.727 244.748 576.737 244.506 576.737 cv
243.78 576.737 243.78 576.419 243.77 575.912 cv
243.77 573.404 li
245.089 573.404 li
245.089 572.326 li
243.77 572.326 li
243.77 570.644 li
242.152 571.237 li
242.152 572.326 li
241.085 572.326 li
241.085 573.404 li
242.152 573.404 li
242.152 576.451 li
242.152 576.913 242.152 577.947 243.791 577.947 cv
244.055 577.947 244.528 577.914 245.056 577.771 cv
245.056 576.704 li
245.056 576.704 li
cp
234.419 574.461 mo
234.452 573.812 234.749 573.218 235.464 573.218 cv
236.41 573.218 236.432 574.207 236.432 574.461 cv
234.419 574.461 li
234.419 574.461 li
cp
238.093 575.483 mo
238.115 575.021 238.137 574.207 237.763 573.448 cv
237.257 572.414 236.312 572.107 235.52 572.107 cv
234.914 572.107 234.386 572.282 233.957 572.568 cv
233.022 573.218 232.802 574.296 232.802 575.197 cv
232.802 576.089 233.011 576.837 233.517 577.364 cv
234.1 577.97 235.002 578.058 235.475 578.058 cv
236.289 578.058 237.015 577.838 237.422 577.408 cv
237.873 576.936 237.928 576.463 237.95 576.198 cv
236.465 576.198 li
236.312 576.814 235.904 576.969 235.497 576.969 cv
234.364 576.969 234.364 575.847 234.364 575.483 cv
238.093 575.483 li
238.093 575.483 li
cp
227.94 575.011 mo
227.94 573.823 228.446 573.35 229.063 573.35 cv
230.052 573.35 230.173 574.417 230.173 575.044 cv
230.173 575.285 230.173 576.628 229.029 576.628 cv
227.94 576.628 227.94 575.285 227.94 575.011 cv
227.94 575.011 li
cp
230.294 572.315 mo
230.239 573.053 li
230.074 572.811 229.7 572.261 228.688 572.261 cv
227.093 572.261 226.313 573.603 226.313 575.011 cv
226.313 576.353 227.06 577.738 228.655 577.738 cv
229.051 577.738 229.634 577.661 230.151 576.979 cv
230.14 577.826 230.14 578.024 230.074 578.3 cv
229.964 578.795 229.546 579.025 229.063 579.025 cv
228.193 579.025 228.116 578.421 228.094 578.256 cv
226.532 578.256 li
226.631 579.938 228.182 580.037 228.974 580.037 cv
230.042 580.037 231.746 579.84 231.746 577.794 cv
231.746 573.69 li
231.746 573.13 231.779 572.756 231.823 572.315 cv
230.294 572.315 li
230.294 572.315 li
cp
219.855 577.849 mo
221.494 577.849 li
221.494 574.593 li
221.494 574.163 221.593 573.889 221.692 573.745 cv
221.868 573.482 222.188 573.316 222.539 573.316 cv
222.957 573.316 223.21 573.548 223.331 573.789 cv
223.419 573.966 223.419 574.163 223.419 574.395 cv
223.419 577.849 li
225.08 577.849 li
225.08 574.846 li
225.08 573.812 225.047 573.525 224.926 573.186 cv
224.783 572.8 224.321 572.14 223.232 572.14 cv
222.022 572.14 221.582 572.854 221.428 573.107 cv
221.384 572.271 li
219.822 572.271 li
219.855 572.656 219.855 573.262 219.855 573.284 cv
219.855 577.849 li
219.855 577.849 li
cp
215.081 574.461 mo
215.114 573.812 215.411 573.218 216.126 573.218 cv
217.072 573.218 217.094 574.207 217.094 574.461 cv
215.081 574.461 li
215.081 574.461 li
cp
218.755 575.483 mo
218.777 575.021 218.799 574.207 218.425 573.448 cv
217.919 572.414 216.973 572.107 216.181 572.107 cv
215.576 572.107 215.048 572.282 214.619 572.568 cv
213.684 573.218 213.464 574.296 213.464 575.197 cv
213.464 576.089 213.673 576.837 214.179 577.364 cv
214.762 577.97 215.664 578.058 216.137 578.058 cv
216.951 578.058 217.677 577.838 218.084 577.408 cv
218.535 576.936 218.59 576.463 218.612 576.198 cv
217.127 576.198 li
216.973 576.814 216.566 576.969 216.159 576.969 cv
215.026 576.969 215.026 575.847 215.026 575.483 cv
218.755 575.483 li
218.755 575.483 li
cp
210.659 577.849 mo
212.287 577.849 li
212.287 569.896 li
210.659 569.896 li
210.659 577.849 li
210.659 577.849 li
cp
207.601 577.849 mo
209.229 577.849 li
209.229 569.896 li
207.601 569.896 li
207.601 577.849 li
207.601 577.849 li
cp
204.609 575.23 mo
204.609 575.824 204.587 576.254 204.301 576.605 cv
204.147 576.781 203.905 576.925 203.608 576.925 cv
203.069 576.925 202.816 576.507 202.816 576.133 cv
202.816 575.473 203.564 575.143 204.609 575.23 cv
204.609 575.23 li
cp
206.292 577.849 mo
206.193 577.387 206.16 576.913 206.16 576.44 cv
206.149 574.207 li
206.149 573.954 206.138 573.295 205.764 572.845 cv
205.214 572.206 204.246 572.129 203.784 572.129 cv
203.256 572.129 202.607 572.217 202.101 572.579 cv
201.518 572.997 201.485 573.592 201.474 573.889 cv
203.069 573.889 li
203.069 573.757 203.069 573.581 203.19 573.394 cv
203.333 573.186 203.575 573.087 203.806 573.087 cv
203.96 573.087 204.389 573.141 204.532 573.548 cv
204.598 573.745 204.609 573.923 204.609 574.284 cv
204.07 574.284 203.091 574.284 202.409 574.593 cv
201.386 575.065 201.232 575.88 201.232 576.319 cv
201.232 576.76 201.386 577.211 201.716 577.54 cv
201.937 577.75 202.299 577.98 203.102 577.98 cv
203.41 577.98 204.147 577.98 204.763 577.09 cv
204.763 577.255 204.763 577.508 204.818 577.849 cv
206.292 577.849 li
206.292 577.849 li
cp
194.808 577.849 mo
196.447 577.849 li
196.437 574.449 li
196.437 573.581 197.02 573.316 197.481 573.316 cv
198.395 573.316 198.395 574.207 198.395 574.526 cv
198.395 577.849 li
200.011 577.849 li
200.011 574.472 li
200.011 573.745 199.846 573.239 199.648 572.965 cv
199.384 572.623 198.856 572.217 198.031 572.217 cv
197.02 572.217 196.612 572.789 196.425 573.053 cv
196.425 569.906 li
194.808 569.906 li
194.808 577.849 li
194.808 577.849 li
cp
193.687 572.492 mo
193.687 570.908 192.465 569.852 190.727 569.852 cv
188.494 569.852 187.086 571.523 187.086 574.042 cv
187.086 576.012 187.977 578.035 190.716 578.035 cv
191.442 578.035 192.333 577.87 193.037 577.145 cv
193.675 576.484 193.719 575.747 193.752 575.274 cv
191.959 575.274 li
191.926 576.33 191.244 576.781 190.529 576.781 cv
188.868 576.781 188.868 574.526 188.868 574.054 cv
188.868 572.414 189.396 571.095 190.661 571.095 cv
191.816 571.095 191.915 572.217 191.948 572.492 cv
193.687 572.492 li
193.687 572.492 li
cp
0 0.6509803921568627451 0.8392156862745098039 rgb
f
0.25 lw
0 508.819 mo
858.897 508.819 li
0 0 0 1 cmyk
@
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5
[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 12.0
%%AI8_CreatorVersion: 13.0.2
%%For: (Ton Persoon) ()
%%Title: (TU_border_A4_L_front.eps)
%%CreationDate: 8/19/08 12:11 PM
%AI9_DataStream
%Gb!U'kB\)XZ7c(2!:PIG<#4.I8@E'jCro;8XCR3_,[*lRQs&91cF'8oKPmH>DDoD&=o3R>ZY!Dpd0KoK&upIeDR7`m^JsK:RuRHL
%A=*8]ZD1Q*cdoF+-C<JjS<quN#qp44VQXJi1[fXY$&,e"l'i1Y@_5M&f#m[2=fYCL\(b,HC89<ca_q&+f!Cjr@d,,$gGlF0Ft;,6
%DPL2^G-YF\6VKG12S57>bL^Y!\_LB1>,I"Xq*_6mC)>dM:_!Dn_?]a3[JNicK0%1/#;u:eNBapKjPLd8:'\?=/aLc_XcqKaYsX&I
%s-pV^0>CN@SQ<!oC"+6eC#,-;>-hE!Pf\_56dON?A]':c97O1O0G7:/bPRUe);/TU1\83B\lm?9!40r:Z>L5,IM%aAr)]`mpIb.T
%=K9k4NV5FSlWL&PM6t[q>ZC\-L@&,ihXc+JC\r;3E,CC0Ibq2m>?CJiLCSCc^o%p;1g\>TQ)kSIZ<Jn).5^UFHMCiNi3M!].sGBq
%)q?Q=!SZ#T:G<[,`BRq(6%_(7g+:i/)qUnCbIV:q<I)d6lF,kgIGN'b%]S46ZE>4T7/f]W`!Z!T?E\.]"J*AnS[L"dQ26B(pJ'-1
%XmE?-fUe57FH=`5?E<W0:9//@4o-6UP.W1?cfb>'?&$aN3orDt&Zi=@PHZ*&bF`$)%sI4k>E'Or$S8(.-7k$8XI*b_NW'^kS,<>[
%GFN\6jR9"M%4D[,#^'anP$bl"ZYC;*g1rRWc%Gk.,;Zh!dWdBWc\e9;fEp[997&kG0`#FJIKAYPjf^GYo#44B5-_iF(9X7<m-4,F
%EiB-_1EcVI7CU\opTNeTKOeh/2d>,3HhObmW!<3aIgWd/@"Mk`s,K"_a9VCe3i-q:9<:Cc-.jUFFfdpnp_Mf.s5r%EMUcJ'X]92O
%=%]Is'Yal)dGG.A%/+qH*.C]_jSqH`ZM[XJDH&.R>.>ISjK.#!<(b^3`Lh=O>jGbOG52juRm8l`maV7d<uXl-P6"R_^LY(q>KrtD
%ELL2aobZ7(A3Yi[Ct+n%TX,I'`FbN[\+@=,8m\;q`mnP3fZFghW"RboXC'mu1/"?D:oXBrN)=,6bKJ!iESq@Tq?tH^cCZQlpqfnA
%nTUQ%O^6)Qh#XL5h.l+]5$RecXHg+bRDMArA9XFXdB]YfN=!<0pt'eG$c/SH(PQ&djq%B0#ljZ'd,.tVH]l'hd'><ThOJ4T:Uk\l
%'IZCN1YDgd$ici@&4R@WYO<=SMH,a#A^ZFAk=hB]JmE,(H?>@WOt`34n*dap6;U16W)s2P_igsG&aX<ikT]K;+S7mQcA4mWT`?Mq
%bXCb8rJ>DRXQKOm0N8_e@k),>jiZ+sYuAm-SdPC6=:=n*V1c3,[f4XgDbc>-K!M3MEA]iPT3AW45;**hDcNC@SMH#f,qQXTC)-d+
%<&'.(Ki4akd'-a93\=iP$O8qbi)fhPk79<[r,lnShL>=%fP7V,m^dr&6-54Gr`-%CH!/)?1$.])1MJSpPIC,8s&/,E=,9_LV]ZH\
%&N%M2KFIf.,aMd5GK3g(eDn+kNj%.bI?\*eN/a/De+A\\H9H9?WTLTdI'/da/H!4<q7gX=YPaZ3X(0P,GnoB/9&4Zg;>YPtffuqU
%=5$)BH;N`)lU\W-s7(L<IJGP]b5WQ,C&@Sls'f^?05lJd[8QkYcAOj?bBps=B+*na@PrV9Iofr;mqHC$(&W8YE8W561TL1ijm>2?
%cNm/B]AnJX]@gjC%-Y7L!O6]NIdKu#At#FdIe3"<E]NORrCJfV5QCS!kQ+/f_>GYqqu!W/s+KiH1qKeeR2jcTlgc-neA'gn>.IRZ
%!Hi)*IeY/]A*SdD+4;\fTeQ<;m\KbYl.30!dEI5>c,P=;B*7l43KhIhUQ0@FHe'[UbFP_B7Rf;(l0p:O/A<g%9]Q&P<c!7R=BrJk
%kX8#XWti(e?,#K.R[$!hCke/meQ+B@NJ$Re\'rEi(YbL$X7AJP55MO(E)pd@TAeDqg%I$Z2iF6LF/<()r(/Ar"_#>d(a(?+Bmb;+
%_2I_;ct0[`n$LEgYBEnE',_OrS[,F"+WK64[8JYj46?Kqj!Q(8lJ8F&Qgp=([8JR]Fm>uihqor\pR[NdY;OaUMbn0aYB$VkBP!fo
%eRH3+V-;pn,Xf39=#o%1X5%HaPH:<mM![s<n\I4e>j\A&V3rnmd,+On[T.bYMCY^YZ[=?;/$O8VST=EA&%'Eo'WKq!k%E_ic^pBU
%n%l"Hr_?nP-W^7EDj3Fn"PGa!_oAFJ-<5NKm51M%EqPH0Rs$IjI^[no4?&/"(Dpp&.'H#<q5uW/@\$Q)hJO*[@?gaV(Fh)kG-J(F
%<r(;rF%0XYQJofL22(,h(*04)(3dgkm;,TsQR:^NYI7*V+PE<P8uF(T=(,8+E3&#.rN0:O.qd0H9g3]GC_qCuJY-cpS$4*kQ!1Y#
%$tjSqkJ#GZ]p)lM3FB5a[F#lQkC?8B6J5\\d/\N>3dlEFDUN:L2HlZd)m,1E7V!L$Y71>dD13,6J/mmV!>><kYV/s_P4nT7RFlET
%?)RCFF:$!p8\QI$!<SVceh'KV27Bi5o>&[/Vuo,A6:L0\_WS#V3j>@B;!1*2?.CGO&;+5b%FBYo)4=_]+UAaHn2hAM@@]t'^fUD&
%WRZ5GG%_FSJ*Q(,`=[U("a1s@4bdD>S+(C!OJnP+B+PA4/5lI.-+gMsRQbEc:O\'_Q\@.9<U)6T%![u'6c#+g(O4Th5jJiE.^1W%
%rW&1h:?Al]D@$G=1$"#TRCKXLo@64s`/h2!ppkQXek&Is,C,j%/1K<F?uq;sDrPA$VhcVc7+F\Z9-m$5C1YMIh+]=TS#$%(L3$/p
%=b0)ZN>BZ==N+L`-C(qQh?toRfLb_LCfP3t`R`(R_0H["Wff5I4`N-..Q5\YdkFeK;9LQXg1BL:9XefHbAA@+Tkh`cNPp7r@o=TF
%D&6gPHheO(ekunZ(-b8iY[5sRr!N0-`XZ=.l=,&?dW`Y76cBRDG9ut=TSoStCmL9#,m>q_`VKsUALXDr/g!pg0AjCLkBaC29sHoY
%\]p:lL4j3^7#]fS[/=OD>^cuY[(b=?Ze0#jXYjWp8OU:-QcW]l5)5G#68rT.Q24">ad2#.W8`kdHhe0<-]>60SbI0uKgpN%gFR_-
%qtGHJSo#;D_HMljXMCX;W2F3bD1l&jdIqHc[H4_[$*4d=.p)GBdEOR8pgeqOQ78RR:"/CaMNrLr+uQ`lKuS^?lThXiVh%j4b1TAl
%$Q$/"iZGN=@=a()8U59e>C+?X*RoXm<8QnK270bPb]XeKf6@aoYI(Xlq?KJ4j\mt5;QJ61CtRAHjP2cgOqT^JI`ggZ$\JU+rCNn0
%1U['W0T5h7'S2+!#!u3Ld&V_R-0WTpGN(Xu6HBdq!>]@V>`tr-C3C)eVq/adn9`ZD"g`F9llpeFi/;"iR$bPq`GAY5OkhufXFh9b
%<M;$c&b5Ms7X)d?D\h[#C/8,a[b_;G9=W)?&SnaF?t)1S-0\-U^Tsd#>H%"-0n&LqeG!3067AjO's=Mk].#bb7)'Be%K#1^Jg88p
%9WG6a'XT]g=Id6]iCGRMg?p]@",>K<]>T&j:^eS,,b>:TAX-1GdY\f59e9J\5IKRGd]`M.[>u7r=50dPek<__.TXag^Z'N.WS5MH
%?t76DBYN"\o$>B)')5%tfkfchK?$.aoN1'5?Pf--]).K<)t1Fs8(&!8lKq?(HJ\OA?T8Nr;Mm<^XHl8`F;!,flGE7NH^%BC_oa%h
%lmC0i^SrRf)DY<0N&FBO7Rp:[Pk@:71b'oa%+BKh44RCN=:r]%Q4[3`]oVDH7TX=^H6([:WHQ#S?@432"9u"[Kgo;f/:[jf^jheu
%g"KNTZ^+)h/^VZ'Y4<D)/=8lAMEnq+akk?LHp9d+T?mLJoT>oVI$=Er&lsBSfWD.Tct,'5j/E:f)U203j[ffd'35YnnBr?.aU"Ld
%YN",+$YH;@0;[YRUi`kJk9k5BkijPHDb7]qo%aKPS^h8NemLRH/cR+fI:X]XeNPN!qU2<d8-EWnRAsR;#'j[Ok6d*#`$4mF)sE?4
%"mX.tC7T+Tm7rp&JgPV@Uma7?N0Op?6^hq^01al54a!Zkl#_7LKW^Ep$U'eW<R@';97\%jIWE77B3M`V-C8P&4O>n]P^O=+S-6+J
%+KiYs_E1YsLSQ?(?\gjI9K(V/+IUnq(3.a2TYU14b8&dXPtnHK^tl4C/^ruJ,#p*W-$'"5_'Al2Y%#L<Vgg%M,ZGttEAFuM6;=Zp
%WNb;2Yj;$Ql[ROgM((k%#dLNL70iZk/N/fX*MH_iAk9jW\W.8rkr'*<cX[97o9n_[R']Vb'<H^$:G""&HQ)SN5,oMMg4V%U#onu1
%`EGSL;*Wk=h+5l6Niu8`LA`AOL_PP)K(H*Ofp8E`odftlT+f0XYG'9-mWFE(6*F4O'mcFFFG.?H8D7\A[8B`R\jY1?,%+m&!WS@k
%6M8/1BJ?P:HVkkm6-6SmN!QgLb(i#@*Y*<QHGn6%M3<%c;@fY9(,O4i8IQ/q;gR4sWr;`a<Nskr08o?p,U*;<+re1>((FKYY-c"V
%I;EB#)Fu+[<!8N=>CuR!`S)E!-8>:B_GIL>X,NtNASelA>S?_/@]-<%a'n!GO%'7eXS.Z&9WF?Kpokg.hhSoJr`b,epd>7aZuN?n
%E8]F(A`Um6lf+AHrF)h#r`moYAhLfZ5M,i3l!NB[k,)d;c4?iHj4!SFh1kg_e6[gSp7KK3Xk$[\^/r#Iot:+ljP.\o;I+cS?.Z9n
%mAZH?:+!H`[=A4L05S.@HX^diS(0Ep^FcTq58U]Die_)lqR3\EY$Z?1[pT*IO8Z'Lcc,9Qm<1)VeQD`sm^u?>2D9PU/A;);T3*Z+
%Et_2B06\(&`pUgagjU3^K"u6[4SC-<f02-7XHiO?\^m9t\Qmp+[(k&3kc`Rc3VI%uqK9QH)E8U<HfAIWgR)99ga56rEabYhU$_4b
%lVm\AnE4*m#^Eu+7s3U)[8u&6Xo#,BU_Tth3RSM5>&Q'<@t+532[>u>KIj%[82Ig-_q)[@(lR!O>hba8Z._\E,](tFS6se+)LZEb
%4M>+?2#@$GrHk6;O[_.;8@,EgkJp_1U\e!?kJ@aPURrn$g/HV4B<"EW\[M8"oBb2Rf%m$7XGa,*lVgKPpA;`!\oj`be@N?@G.!#;
%dO;3XaB0g6?^tj)I/^1H;/Q'uqfYZ.c;a5u@UhdU.*N&Uqbu7=qJi>WnDrHsQe@#Sr/I`(f);eH_\t\-SW1jm\_=$sO@D#d=H^ul
%nuU]V*fS"?f][_OXQJuQcR2qTd&>KN2Yuq<Biihu-:aN4X/D.%d]B1j@dA"\G9,/rDTSm(3i941p;V_V)FY.b1Y-uTEHg/62u76/
%Y!)*rZrE$n\j,lCr7q/)6_mRmKe0&rX67X1P$+@Ph>Q<4)msSP[,%KQB?H?3mah<+ol^.9-Dqc_[bI`#`\ol!Ea%=XCUC21I@L'F
%BbXaE"TJ7'bC()-0;)1O)/6H@]D#jA7W4XV,)t<k5;(5qUHA2l]2GCgf!OH>hh5%'fnH$&mXP.XXj(u]eYmXrHS*8rlCI9(5"?O1
%<`l\hg1g6P6J^kQm#Ro((ei(A02>2"[aF+ulc:8J9JtB_9=m<rR#bsggUT<#]5s6s?>H*(UerHh8[FcFYD)_\7Lulla4W=mUW<B#
%p"[L;F_.?*Q`k%0=2p6mqo7FV<*Z15mDmZ<7s1S6&'DX68df]KUR@Y!m)/GU8Sk.D/(N=jQq$Pr[E$;s9ASgriaaCf>QFK#*:$Dl
%AhLO>akOjiK"B?*',.M!mb%h'\k!`nYm=V!eG-=/l$Y$IUFX*S>cFdUY?@VBr^*F.hbS-l72c>D5IW;*FT)\\J#1QG_.K$[=Q.lT
%6LM4$EXn(XBh(\)o<kR&7Q]po&Or/:VP!(L0ciA+LFC,0#4YFBft#hU7e=<p0K1^jSo\hDdG8\>VLC-KJ#A:/lUT-\7PhTsbJQuq
%+O'MZj(#>kUJmd=[Q5^N<9kFd[<_f<B)C$Y1jV+n-#]ilZcH_C=fk3+Qn\GjfC8OuY@d$,3VHNNfc!l@YFP3fS^"NN^XdQl]e&\\
%07%_kj"L:Rr7C6Up3qC<q%W0feaG.U9C]cg9N9m^I^Q'EiNGBYdn[Ls^Z*#B\G#lS?f-&c<PL;HBp\"Be(Cj.SL&mr[Ct=$p3>]u
%k.fbC\!_F<[abg9f),@=l*KW-?_.))KO=K2\&2R".JCZn>E&UYiFD:4rn#1NlULOtVqC%a@la6u&FXCMn\88ZbJj6`5NcCW&h'Vq
%qN_lrldn##&c_1]n!2E+MQP)Z)c*_G:WtA-g&0I"<qP#.PI1r#lZ9[n@M=L)?'BbV&sgD95d8%cc(#$9i!_Enk!(_S4.Xk=lRAED
%Z@Dg8>RtWQi+&B4[m0Mec,/H6mA][8`V0/f`ML%+1"1i+m@AYSFCr"*DshgV6Mh4lR$nK<$]WN46KRh14A=bq%e0)_o8#T]RP\V@
%T.O!t$S<BM&o1G./C])M,KpniSD0.a(/DO=XB,+DdmZ!CbNnhbW_ouO\j'8<M;a>O&kaUL;.g7'S;3J$DstS5M*<8GF`Os*`]&cu
%:2H\=kIg=SpSqYsBI/(qQl!eX>tg.Z5-k]ld?g8h.=o.1r<J=N;PWqICB)g\*tt,4!^FU^3k8J=a#6PsIoW8^8cjn^o`(P`Yp+ak
%&fTSqG2aH0m9e5\bfE[KSY?tQk]m5T^E-[])Wc>TFUECpVt'MXi*XZ$?!@#.86*sjd\OPu=&Sq+Yd0Cc7\XXOg]GKCCXFeeN>lV)
%-aSIeTj)-Rhn.PsB%OEm,`G;D)t*L/V4Apk5?l;=>Cj')4B$d$M`O(aeXdTT8+<^!oGd.YQ6WI;R_Ln95A-'rF;K0(<!A;l^:p;t
%dY(Y'+m+:_fq*A#kAoO2W$@48bhT`D(5?^Uq+Zc<^,=?tbtP;0?J[%/R0on!+L5M&5%"M;gNmjcG!@+B+a/-J-cc4mFOGte8bU'K
%:@5K"4%4Ij04!g8pn'XqkJI(<.Zf%+DWch$8.p_Rr_pJ_%de#]prr!QUZ:G*A_8^6c/@r!MYY0gq-C@Aq"V?N`YR*-/Wj/7k>*W.
%.URts';\eq@O5%*rqN'oZ"NnHCSmfo4LFhe?Wj[&VCQF>576Ku\j*SHF;O(N5g$iZjmUW<#3&REL_VTcb'J7!f+qoJZP-n5K&]%L
%oh_coG;a?*=qUjg0$C>oI$UCu8m*h7G0lO=OEP3B5>U*<i9_mb!U]#YB_T#H4ENNCe8.3Y=&OO<@VErKUC7T8+bO!+q0(2Ie3E,/
%a<$56EAQ6Ud8BG=d/WGQc*5l&nFiFMmH#Jr,cp&I@a9f\4kPM;3hO7gSB"Bgp8UpF7``GWjZnJjP1#h@CsdVo.I_nlr/P.+9k3dM
%IlL89Z+DWPdu0E:Mt4U:*IQbDqtb,N_nE7Fb<fcTAVp>?EC"V9Ti`)Laf!8AknN4X\`ek;fu^ih>YqNgMcT7N'mf`LCsL)BrSlmp
%&\DEYmu><4]inOTPRp!?m`KK@pA/K3WEIQjT"_H)Mn%J7^0_)m)25pL?7/l,&HZQb.HVF-s4A>\HP6&O?HB,+Lp\?4hY8^g-f\e"
%Q_6Pl<4]b>V<dNsl$9LGl28pbMte1VVp_E25NH;rINOh;mJ_da?SAI[@QM`KQ1\"!,$!T(&h5DjB98N$<i1k;@er&5ArMp_jsYjm
%@QEqq/G0paDu883CiO)%m?mTioB)m=ae^j@e9n@(5*81Fc7fE+]dr"6AJm_TY3`5c%qmATo2m;]3_J+&q3%%)1T??ER5Ub9"OgX/
%5$b!A(6j\"N9*XAO2_&1gD-t<ktJ`\7fl>RF[`i`#O=oK\&=:TFN]+il*F<`Q=4d=Zc@/)=[_WjfC^7Eq-q:]/_%6n\(sBQDt\'A
%kj:b7XYWKMEDDL##GGk6cs]o?,Ar,r[!tSW]W+WGq>5>MA-P<0jYt[(#5+5"Nit5t1RPit5<a/eqXPm``t%*;PXL#i,E\b%2F`lp
%+B%R;0qLh1^!?Vk;/lf!Ki8mR0fD%nrm$%373GSW(Ip#l4N&E_4M@i_+]`-3l\FlK"uiIYAs^hmP1ACG]2UkV]k=SkOsFCd3P@1,
%SS0jWEQM*]Go5)ieK0kf0%nsPXM:7QhG<A_JY?4fK=a']NCdE4MWM\Q5-PO.Th.f[,b/!G0HgD))/D^Br'!_%G"<*e8+cZY=^G1l
%IO+ddU9$Vck[j$)phRg5*&7WaCPXCfpe@G`Q#7YbWjK&4;LPFg\VdqH[5^#fm@$OsXGlC>9)ld)b.$'V'p6TI,R@gl/#2R"k)h1s
%@n<0#cI]7?H=U!LDOJolIFKM9q@4qC-qXT!$G@T"^rj-C:tkFQhOt58UgO0jd.'Xte7N3h,O;Z6jH*9+jdHf'<lskNh^Fe2h^._P
%=NS@3(IpW\fRdhCi]/+RNi"sk`6)+Y&2<Bd<Us\%luQf-^2e9,*`43RjCDU[c<<i&Qc\p$7lDWJlOC3VndZqY;4LU=[:F=Blf""F
%E4I@>I8ZJ\69(&<Q/1GEbWA>e9o3'URSVd#BjGCSQ/LA+*+haR$S,HF-O+qDpgTHnN9*`%8l>OlPbjbK]VFu[j_01(^sV4gBn$P<
%MAPiCSra;qhB+SQ!\6A#VWDJr^;QC:=P;BGW#Y13pWLXuXuL3R*%gR7a*NL'BS$,6oo+Hs@4btKHR8@+*)/J?q%fR]KXu[V`M-:s
%kTl@P%OI0?:g[.]meAfWfW3BV>`\1NG4-3JU_JQ*Z=\j?W?lKF9R8T)Q,Oi3-8X>HZWF5E0V_LUR<S)f"g`uU^(%fIYBtkiP%oh\
%A(Q@6p+`u5m#Rp5IKjpAAN`2M8*O#okqmrj2E"o"N\?WN+Wgf./G_O#Z,5]?h\Io/Rq)O8Q%^LO,"<LEO/GMd9sI,r8=i?E)r,g:
%QA'%L(sL\>/hLf2a.V<W/IGW?\.li,P4X*$/V-,H;U;#a0Rgm%rQ0[`6gX`V65JDh=X\"E6VG=p<e;l-g70DNqdL[;iqRH=;7@Xr
%09MLXL5\?FgO_neP;UM4RP%S45*^loVqKm&fgi[c>o@FK5d<02DQc4%>00RB<;SfBoG"c$4rOkf?oVGf9*q)PXU*jNn_5QDR%E'G
%7bVoFKilKn'22X+W%2n]aL-i;s4inN]jaR$@WU@c1"mBml[O)AM3uV/V`._GIWR[n&'8lSPs7:kA3ca.65Y*>k^t1H`MaUj:Cs_o
%9.N=g9h=PKaqYL1X"*lsE$C<J[:LNCbIOg#YO;+Fh<TtPL!JiN:@%HA;fW(J-9%M9]&X8\RP?XF%UF)Z*N\>,jNo2cd.LoW%[f\N
%S3_pSWf/0XY,>,GK8s,_UZ]uMB@,$f<CY<.lYTVFTMoD0%[08HS3\O`^5\@EQ^g>hjm\:l6PoYnR6d0a?9(7\h-sgtSa9-I%S2UU
%Hi)Sl2L9^[i8ZVEDO:*Pm#l%q6Dq8Tc2&lG_8k_3[3JO$4Z7?G>_/iO=7$tujltT]9)ISENne_uOW8)$Q;.lLb=9bl%:jjtA?^u<
%=uq@;.IEJhrc)&>a%)(FaU?]65`g/:p[Msl6!Rd.:A#(a9B]8!o<FA>.Y1?O.<@V8X,l^/-*Q"45>\5u6mIKa,Z"pf$DOd"DO2`*
%F;sram<16ZPZj]QV%!U%\Y?@NDBg8$n$"lR`fTQ<pXggV-J9t:k>-<[J7fYlgSkXEA2=@h;HgU^DEL@!EX:5_Y7a^fNO?k5j2np\
%e>8C!Y:?uY\=4\a1f]FtZgh8@9,c?h#@]!LAY4E]*YOb(/B2[CrU+ZhI!DcL3\g8`'o_E)rl?`Q$V\uVBkgg9[4?YH?R4cKfSgJK
%EddLcE8f(KH?+D2jB0GG;@<R;r.dKOgSo/Wd`nEN_,S@gVtI1[76R#po@GXVY?t$u]#?q/e$1[m*e[BkQ7><m5-l*%ZFHk0TdZeZ
%R2MT*#tH-@&$kpZKL%"%EVt"2IReHl2K'Y%9M!ONdOEh>[;LlH*m"YNrK_m'j]#7$'e!u5OY\**DKPHA5.c15k'(ok-Q=eVXg:1&
%HU#3KVcLe1HXd`pYG1L9.,d:\a5i2tV906$6Yl)-4E4N#;/Zh9EU1+."_,D^V=cY(6?8mCOcsYa=-+XuF27l'?[9KnV"TekHDKQ-
%o@H:CXB8&PN*j[3"1i]>dc:17%*;a%2Bura?CDD)O$.T*.?^'_LRV.hlsN*Q:4/MdiiF+c1b>3+40e4Ea:d^s\N1SW,GXZ>mRg/c
%lZ8DTCu$@Y8\LO%V-!ei#4opS7].=:lB.4?,^X(GC&aq>]t<<D4<>A]H=_+p?=Q@!2@\`0+V@+^krJUfb]l6*R2cW1T,l=1;*.JF
%aCN`/*\\&*:TS&pqihT2&]9B<BJCPG3?tq]Ibo#b):8PIKX'"'k9qm)3CQa!E:GG=?)m_C=XTYn\pfp&`mXK]HtegVd,q20=q""5
%F#9[kVftQdO,-FVc4;^e;[8%8f.X![9cD`a!UMWIIR8t)3GafLZ1q.'.9j#`?JX!&L4pBbk1'nZYG]OD;_`&VVJoli-rS)+B_R[g
%cM15L3Q4ST`Sc>CD82#k+"lEr5L+YdeG##`PRf-06!oQqHUOD82gC#@0_o[f\3<S))fIpqLtRA/oAMJ'PISVo%k$KaLDb*kc5B,9
%*;@@l)0)EbGcH/$\6B$SRh(i_B#KZZ+"h;d`>n2[p"WY3CqeQ31l7^&fU0a9DODgung[X5ADb(Mh&&/c*gtAab"0UfogGsj)!6L<
%eh_=N(=n'MH,P>8;GZjhUd>K;s+k;]Y)@L[-);1WkEXG3Gh_T@L4H,UL651Ip%E4@7PtUA&LD;2n938([c)A_CLo7M[c-o;gTX`u
%7s^61%7,_%`Tm*[DZ_?ZUtpb3egmk8*/TbMO\IgZ>rSRN'\VI9D-F2QelZ)QZ"m\s+aRAQXPui[bSN?9(1?B%T?,2,A!dOM1-Tbf
%i/CW`10"s$\r9U:dMge\!G[t!8+uV<%'=M[UjaCY7dB_&AYabs;b$'Ho[c@K\?lC2dT5focr.ZrTKu&R1t3C%U"B^F=31LpjYlHs
%Kp2>bJCuu_;rMD+O"-l:S>gH>MS5q/9cYDmDIC6@:oSC_m)h&Y_Vm(';DMKdN7Y;5E1p@,J#;K"WGo.m/61?Y(:cmo'e9ja:JOH.
%)XU"==W`!.O6Jtg;O&FQ:uP8F&J^,TCPn#YLXT\?nq4J#A!mSS0:OmrI=*/cDs,+;_ZZ+r"n1gC.itMJoosJcLr(=!Mi*:/s5L)!
%b2pk0J37i)I[aHBIs[Vd\piG&=Pb_R-^G;ASI$uX[d[Y5pr<(T^*ipZlO,m6IQ4U>ID1F8_+-B]l!Qhj,$eg\OqPQ6D*971S0qqt
%_,r%D'jmMUp1\Oo.G6;f/?TegdD\o$gGeBh:!UbI\nY:7if`,H,UL)$9$XYfrH]&3<bH/:5C=s"2>WK#Mm[gRH/TshDH$#cO=<Xt
%^t*s1f7K,SPML*i1@0P,TAq`oZs@&9)UkW@218de*ogREl]Yc/[c/7^>P`UcgF0c?q]>bY?U!^g]]7\t7U,8\[>EO*-b_\o?]#nL
%BX[:!%Zl1FM4!2snPYQ_5Gm4G[oSPA7p9><s*ib63UL%GrQ`t7':kKqFh\Mc7(JXrNa?BICONhNpfEVVK\X]gXDgK?b5Js>JHD>S
%;L?]$G9^uQeX8k+8&#7cD'?FrELi8Xi1[LTG5L+D4N'm5W\0!LWf6$c\WgF1mJ\ii.I"4N&2)QkEIFf.O]+IO+FE(%ImgI.pk3kK
%P]*Q10ttA?%AY@tlGulOV-'ofs7bR%G=h8tZD9822)1RqPtS%IoT#/12io+nk\N:[/mX->A&tNG%8Aeq+&b(gb(SmRAUN0QA&s$;
%nebSsaQ(@=;ruGa^@C`(e"sf&A<^oA_'JTUflXpV=kj1mEm33YE@3!kc)+G$V^9CW%$OD`;@I&U'1U'?P@p6Ede1.P@>J_\Q#`'+
%HT%Fp99Iuka,j#nb,+FOPX`rq;^nW=Vft8VFK5-EFdR/[e#@BP'Q4>>QqaKY.TLrZ5hU7-.5mK.3`RfgL_T0U(a`0tphW"A0hUoX
%`PTn=.[s25JE>49]&g_-oQccbbbY[mo%:84<2V$A;]9:,?(CRKhJ>7GaiLuul!ibt=L76k`#traA'LlL&L0+*Cc[gs)1@Rl*n^NM
%*nnqcf`7i:MtM@?2e=1=I3P!FR9]4&D1!O5hp!bdIm-oF(rL]C6'lWjr%OnY=/T5oRD.npF$$]qdOC>,rp-5l@Zb[;]Vg#C[;Vto
%&tc1^m8ElJEdaR+:"pu@!!^!q/:gQE2KP,#,^&D)\f[;N2J!Bio5c9o&ReR;^G+t1T"3S6(o!^%4EDn*WKO?GO7^Y%cg,VNcA)XQ
%k"b`$A\UXEJaWa1NDES;F>qEoUhB+Y?C=CU;@W?D?*$OnI-@__j@GnUmSHjIqp=0?ceKi/^83kQ3f<(>%s-&3BVp1tW9Nn)bk3JF
%7Ik5O&>^UO!:ZYl4>=/<_7cep;kBb8@Llu"-d9,;4=`P`.3GK-KZU6*-0ERNaaicJ?c[g/;nnG5Va+aT@G`>t9Z$dooj?dBZT\+P
%`MYnX+aQ(HS>a?t^qT[u7<JB/D/@Tr:t>?8U!@BT8\=cAa$,(!kqX@Dk9=5d@I%&ed@3geH:H6DUc`p:/C]N+RnV$?:(c05Q),!L
%$`XgbE[7o5^/sm]>`S>T5cAL(%iJllJ=-lCdR5W8?Y58\4#uSO&IljX(i%$$ba=6r&g,9!ZG^6_W37.-Wp\9$o&</&i!Y;,%m?J$
%R3lFMrK665Y't`4kMG6m1ET+g-ckmr$&K():TI&MA%3h8e2-Z2eYJM&VmQXX.8;:E1h!FgXSk<#$1Fr>Z2uiP[ZUraecQEr0qK3L
%qF*fJcR2>2iGQGTX+u)]:6kX"5OoInd224?GptCp5#LlDGscL;W><]M)b3'i?F\1Sbmt]VKfdh3YP5`.qC,a\96mQuAj;iaGV6RG
%6<::Y1ZZ6Epmg+>C(=OkZ&6j$OV;N`)B2%QXZj98Rol0ZSh!^b.,HNC[3kR*,G0$[($MHt`VS/LE3'Y8`"_FW]i-h"I_4kfRclG$
%Xkmn#fEg5.b"oY8`:G]p)H/spcH9D)-&R(dJ2AT.aMH-pfQi%j`Y=A#m$E:OQkCk1N6AAW\\(]/J9L"l39#K:Y9tZm0b'Ge"C9Fh
%]F%$e\8L0Y/k6Vn0Jk$5eu!Q_flK7N\]5hI,jgM36Tt1Bf#M0c+3A+lqWAoPR#O9N`Dek#Rl?m%RS[`>k'"i/*Yi\!R-H^.F-$);
%SLj?kZ_%'W\3cPY5PN6.i=a*sBK'FGm;Z@X*`N"k9ke(qBN6E/HC39-0sUBCE]LCD\`$p;hp]adbO.H<ZF.QoLWf>)c]&I?Hec4Y
%^V_rGT+C+U'f=Tf+[:'-45FS-qPNlpgYDDmq+'3rGKL`baN_^M@I#X3pJ9Q"FA?<aFf)&%k3>lM'&FjI<1&(_pMXueNc0#XYB:d@
%)GS)<qX&Cn,H5CU__;-V,inrQq]`a!.&WpoY#_acP47i4KeM="RN^jTVW#MWrW.<%[+IjUh1trB\tPLVQMW(85K>Wb9R>hr>D[4(
%eUBTM'"DLK)W(FWEu"G0i)7uo%q[#,9$bGB8I*>OGS4W_,uRWHmW>J!U0K%sSils6OeQBeqt-!a`$CAR8*T(R(VX1D$UlG&\D'XH
%';(jHU<8\:-I6:=OjbGY.qS26d'%gS@pMcJ*g6<rT.anGg4V(-mN4N[ko8`U0&%l*F@UbIj_UeiGc>pdCS+"cKoNG6&@<-M(YE20
%ZNGoS,pg_,#$)2&Q+!'3:*Gn,Q%[;G`\Tfk<F_[]Xb8=gqsBaBWIXqR4]-C%kGG"b5Oj80i_`mZ=#3UTe?Q7jG'1DrO0GZe+7m9d
%VVEfC-Ut$-_=!76)sM>i1k-0W3)!`\h_%^%(g<P1St.Uk7!lPq'XDLE8TsE02lF4<H=pd715R$j/AP,dJO[MPc55e^[:!S9;-I]3
%A!*kGhRhcjLOAQ`QbsLbDdkB])9>;(%@t>W[fNBdou;Zspm='Rp@Z@.`d(R-Hi3dD\EkuF]#^dhYr@3kAZtR)$OQZcCa4FSd<Bm?
%&(#i`A9T'i/8=<p%efa+]eD^3eNaY'W4GCYb8t9X*6.f7qeG/3QR$dQ+mWV?V?0L'PfcQR+Q@";5+[*Np(Z]eUF_.eGE#&%5<rfY
%?IA#ZY"bq_2YdOF_'mkfQY1h7W_Y7&UfbD+F9\IA\J&%I:V(MXG1]spNNEV]"dh1QYhqSh0i\YWU7T5J*?Y_DD%<5Sq1m#m9Uc-O
%iJ/pNAHA[Q!DNHL=_uerRN+R>?fKX.T.Idb3IiQbCuWR!.L.Zd<q@#.J8'')d7,0@$W-7hI+hDY1"8;,@sjNEs,1^RGa&_WU1jRu
%*.W#<o-du(<VT'+jbnDHD9S(3`Ug?S50B3(cZT8m8,9[GpWl%GQi(%<\/sa)I(s]T8,;3u7;m(+,=6'nqP4=ZGPu&&2u9Q3d!%iG
%hXqgKPA<ip&brB`\F,)DIap)gZu*R%rDLT`NVoq$TCXem%@-FchZ.jfNUX*C3((B_qFT*!,J<?/SCg4SmRD]X03M_EM'*`3>sH;I
%Kie64HqK%*l^'_tR8a[PrpT\0%umaQdGOUiIap+M$R!R[qBZYCOCBHJlPE;pnu_&L^$D")E>G1136K4nd9$:6#!;CfIW;o8MrVoO
%ZhcdQP55B_2"18eS%<&CoI02)$.N!l^#@i.)a3A4\9In9[0.[leG&ad*N63KUkF'6Ond6"Q6X01Qi*j*T"^3E>sGb,@p\gAmi`S1
%?,,Hq8@&!1n?-+@>*LK>hj'tNlaN5uE)#\c0tch=Hn\5M\4;&#0DV86R4C>:]7-b:a\[I/m6/1jVo*r?iu@Y,&,mX-=Pi^D<oVS>
%F-M%.oh1MC&0#IJoXfQek<"1D0@J"in+oJ]@H;Un&[KghLsM`rN;ftenp*$J+rJ50IZ'&dq@33@hiL,B^$kKN]F>UZq@3BEha"Vl
%bj>kQn+mLe'ORZ9k`%X@^?\:P/Ri)[l]_.3qH^jHDO<I8Xj?YVa_HjK`eJup:XLiS<PMs\D2Q'n2f.@:@.3q<eT0I_c[1'<9^B(S
%nVrhC:Ut'*]7/1rnR0K.MHB`\]K8:M?,*TYeZ4/@*r,BrqSfE796":JU#,H8%Wl1-kp*t/-W-u.<BoTYE'q;(2mD1[W-A2<fTfrk
%f.Zr"^O`-bA)?lO<X`P'2Z119able_,]SWarK:O\9/me,1a+d9<PLe"NqfbaE]e;WG3shKqB`oAQg-+NjV)t1*g#7Fg6hilk?Yi5
%iLn?Q*9LPAGi=0S&6!HqMMHu\>HD'!$f/=4Q^@u[>qP'gV6]YEagKkNn6Sjogl8hN[YPGEN9AMeV/;8c>7a.q))EMS]KhiAqlCCX
%1Lc2Mmb>Ib4>G=0jEA7UI\-W4U<*a*Q+'r!cc5,$e\ge07'>r]'=04Cm_hHPinK-kEcJCp>$]fd>l3=QZ?UNa5-+'uD491]^[jnK
%I<aDrp6N;Qg9J88V]F[n-tt%:D3u.,@Wg8Q/tUWQ[B!Z\0A?)8rE[$!ephJec,48_qtfomp2KkJUcihj2ql`sEaARQE1YO-IX7N&
%[D"9>[b;Z2:933<3G<P:3d9tjk2pI94SH?;Zh(;=#4piu:7PR+jpZI:3*SS9])H][2I159G%V6Ll0I]^M\U1$o!#L6Ge&/Z]CtVj
%fi\_]!GD/MpH-Rdn]WYRP/U^#HX!(T<?;LXe&ocm;>6?I?893:^/FVO(9?"Fkm9n.:XY]H?2X>/Gst:U64=_!N:ujRmMd$X-5Sbp
%`RU+T?YetCg@"(s?#=M[ERnlOhd8o$Boj<\\bN_>9\uM6UcF8n422-)p3gEcZ)O=aNTi&%\'NdkVN;BceHtAV4nciN)$M#r*d50j
%1?K$k4qk8<:VP^[bUjVY0u`hts0ITDC7\-N(M4_NChrh"juko(l!sHS96>o'1ZcmuO3H-DX`<.Q3;WXQEH-=SfA3"P5<&Z?ZZ_t_
%m68eP*Pn>][8H+S7LfM)pWogMC,rELpMKi7^mM@>59'N9%U\_+U+Zcoe_+<&=hc)_Qgi<Ip?,I?:[FGHI.1QQETd11+8^+tY$X+H
%[jo@KXqfNh\Y,].g<8:,$NFOG+oFX`H!L0`J,$;`r]jrONn=&%]D:qD&6=j!p^bDKpk.5shT@s@FC&d/n&o02448-ra+)fK%Y#Z@
%2.4H..MiG=V]+Cr[qJP6[1<+[ARO=%^fNQ\X5If0&W83VJ)!*_H*GM<8XI2$#3^&u'I(lU^n9d.nn]?Go7DJKct^hubBfc*hu%SF
%Sf!/biV%fG,dakRYHgW9:\1@sF42qY9Q%993<-S_md-N_<kTqX=HYs2-ETtM?6`Ju<-qpWX,U(.7G88Sm?JGflWejEg"Ns)=oGo(
%mN+5E/iW(QahBMgmhQu?8tI]l<5,FT:UFN'?(/Srq^Kh_o5V9VMQf\D28IN/8?=+2kaA@K.Sa;'PCEW'0,DXDLkiq(a)-;6MsAbW
%<!LK3&&*TtjpYWD/H`f%O"]]0"u-)M`uOI@=^V6c'p<FK5I!&[I]6]TdJ%_8>5Wb08(IkQD.AU-QbYri!fRjDrl.dQ>;-*'X?!E0
%R=jmA5BV-nN"_7hH[OG@r2Yb_+8bYO-=:D8P<\"j[gbYh0K?g@4HR+h]he+/3*RTF.TC:HH"p5YQ<"b-o*!T^k>:7[JI24"6rutL
%+8k()>&duSXh"&_hIjH6mIR'f.Z0Dp^t[JLa>D2Ye6T1t/oXY6m,oUXlpm_K\C^U^5<h&4,5_EWh[*&K$`h4pWE3M3hn,?K@,Ba8
%,?ft@=j2[?(Ko$HDDf-WOGsH7E9-qNW"XklA/^<aTp7"m67?"CQF";CJ(%_Eokc,4=qh]*;Sf:($_`0)qk^sh]-%0&mHSBd%A35%
%52U`6h2O[lFIj*ZL7'.'TqGF`$2NgBXPd<Y!dl0CkXnkAcg6G@*7BLPgCr-GqVP?VYO@+O\?s#,s2kRK+i%L&Q7dXH,&Q_35(<Ao
%0l8QC,I711>m7c7'0l<)cC][;p.7EW,N9a[Lp[IPk]oaF-'-U9J?4%/\,irMq?liRVsX23<nMhhi,9Tf9$hol!p=SX0;&li'Gf6F
%(\9!sK<$;M2heBg48G%s"^sZ?/b>A@BLS9a9jU``l$)41l6&"dQVI5;(GjS'OB@M+"!p5JJWfX:l:7LJSXsMKe+.%qX3Z\OH02U&
%m5JaD9uQtbqV=N_7""7!#:*"GXQ9/5T]`SeML2Uce_5:F`D'56j=KQ.6fo\g(J.W^s%_;RTU<:tEf\g#_]XC=7S6:XJVWb:1E4[G
%C$jfu;Co*bc^nS]Cp_3&d!>2:3\.,q*dp)5Cui"1`^FX&kr*Ep12*[7mX8sPjL->"]Y+hVf'U0'.Ie/eK6Y\<5;2<MTB2*o[p7[g
%:.Y>oQAV<j2P`R0>LK/4*U1n2/ltYA=7<4DU*t(<6eD]t>7#jVB`L5'E%:tbfV!E)i)Toi7r^dU@;m^tp#JF+KYabnVS`gQ-Oal=
%W,pgZm=`<XKYU1u^ePa%9$$&t[hG!,!fFY;4[i<lW_Y6`GdHJ>H.7B.l9B'g-$&U^aLBqLbiQlU^/14[S"Y!OBK^4,!GM^!:Tq5P
%Y#b>HRO>S,6T;d<T.>g\(aWtI&mkui(4:2*d=$eq4cI_4PG<PSmkOipDF='ta1b$5Ku")K%0,:B7!4*ETeC-QT:F%oFPH+S>Iins
%>@Q6MNdLdS06!JY\'Kcq_bU`$m);4kf>Af*oC$PqG,QV!Aq+(lC_.T_rJ$u82u_-,`cYQ=l[$:5/Y%$cjjn.HnlD`&QSPV0_T%/0
%?e&L%]<-,LZM^??G,*QhQ0Y"-9"(sDZ#t$Dg"YUdj/!1'`I(=t%;3O=r8H.SHs6N[gMjosg5GG<e]ud(otBY`YNO0&-f6g?QKn=a
%lFMH3D,7ieG;?_rXo8,%ZK2g-F0\M@@6\ro[pT*IO8Z'Lcc,9Qm<1'r;pI9SJ"o`KO%(>(YjH=;ak4:oR+lO4d2UkYWUQXbX(96d
%o>GMbZYPcZWe%LMXh1ni1C_7Uq7c\%3g9G=kU^O'qUT^rF2ur5!pIbbQe/:]Y8dAac``8@rHWhCT0@bXH8qGK?i)ul4#T!8(O*@q
%4TuV<hKNG>c3Z!hi3K9BH7$Zj_Tg-,n[/>%6qgdqFWT9*A:s$dE\l=N-E3ue"'OPhGh,0(%J_g829_lpHk)U&rFMDb;Y6HF$.#,!
%Va#V+afO==05n\L(-<Gf#/UoA?4^0rCl+M:VoZSs%=ZZW+-rf8hY@[hkNU"?4.[u-fV21Z2KoJiL&\M2rmY1=L@@'^j^0m^O7dqa
%)""6)oQEItq(W]8rG@Z4H#Dp27JO;2XOLsks4?E&9_Vb_(+M=K=O/o8Z_^iOC&aFqaf6rk\C7ung0H8">^W3HE(N'D1%21HA@]q5
%<j_[:oJ%66MqlU@5QCLi<P+h<QR'!%^bVh!9$d#A43<-o$Xo$pqSL^8e2:u-NI#$5rFte:[H4Jq=^O,CLR1$4S*#3*9X*&oHO!_^
%TJ??QQ^9GaIJMegs"5i<@se53EmO2rFW9("%Wo;K[nEVm?/)Mg)=1_d]13VQC[B7]T6cZ!'=WCo.oU82ZKZpEqR6&'rr)*N9;10H
%-[U?T><FuIDYnsfY\d0;i*hTO6_FRIR)R07Z;VQ,:Y,2W]V@*?;_f^KUk,=ODBiAXUOmJoj"o=:[_"eKHu\_o,'DoXp2;Q_^FYR1
%rU@ZPo%)aIFc1UAge[Rpl1JfQ:3kt.r8=.uOPi@uK>'2>N]r#hH#['c*H\(tiT[b#*\ZN%3a--9o$K#oHbU\JXeu&Xl=P1E^)Q/8
%\G59E)6e_*Z+YOo8<d,cP#&rOn)qB[bIJu]1V+YRcd<P<B*OA<]<N=F*DK4FD+k/JUMGSTBjRlKWNm2:?u]t.I7Nc^ll1$FXVpYl
%9hqjnmr:!`@j0hXCJXBd$5KMpCc=:c)gg@Mde[4:P>2P&INjB#bg=Z6lEWFVHDeZ,g0R*(9*61?L:UEW@LqiRP:TW"?[_2N\hi`*
%Y5[BC0=/cL(ZtTfo"6O)@kDT?#f]Na@f0Kjh9[tq;"-EB04S9]kN?kiEP;k7_1;*1qmi@,klT<X3O"/Yo#jGW%Ob57VVt.]5M#9n
%E?_Da?fNK-0TZAfPO"cqH-u@FN&,N=8lTucm/V%6q5(q)+Q'>U049c!N4b%4KOUp9TuG4[oKb%;'Ml!T6<m\d=_#g(fGj8Sr)_Ek
%\4!f2dc5+:297'gCl5B:Fp[TaQ5m1+Z`kQoWc"u2nP7Vn:_s,"qP?n4#dL@,WoWBe!2]T8<lqT]&CLN^8tO/0TDh]Q*3E@?b5Yn8
%S=[\ps2-<HT#\dJcsp%sjdV>1.?tl%#"n\UXHKog2,PYYNno8HEu4]qk/'_3of+nL@BTGjjaiG5;]Oq_PPEOcF4H&V)ujP&ZO/VC
%JZ_6)e6bUf:aVM2jJ(Go2R.f2ZrqjYe;oN;b,pVoe[$1i+8rD/B6D,8)R^*)fSCS5BBD+1m7M^hHOMCV;dlHOfrgQ#Pt&I>qNG2N
%kiUt$l<l]cP3!ukZZFJ,m0UqP&+f"7H@k!:6$jOg/UR)5L,THhr..'Bi?,f7qE&J(:U50T>4r-CSS,/p/`Tu[hXc+"rhtR$/DIn0
%2dG)=:lG7*"mb[X:GWo)k9I>"j_`97p$AuZR<dE59WZt!ntp=d!a$1&>P%EWmNWQtXosI)Q/HFIO6_Yg.sg4OOe+OYhQVE(mYM8b
%5$*?>5a1ei/k6d2DeK(c/+r8ABj8$qVZ<f1/i$`-H6]cCKct:@7+Pd[0S^P%e+/rA)"<gTkFi@jWmX$nD]+QaJ-btbX&DPF9gaM;
%+<<_DN!MIi'.K!(DRuVM47BZ`/6pfQ_uI1pjQ`%dT)tr/^+"S4$"R>@W]D.&,5nrA-,*eiZt<7c4Z5hMa=)SMBB1Yr[;"fHMi9`N
%KL(?c&!XB4XAGC_jUK7LZU1]4_El&oH%mo$<>":tWN&!""28@_Y4rFk0___9]B6qUF6HGOmNC?L+DfBErkdiQ@8]XK9aZuIG;RVY
%+<7DLpJ&hnb*dP0F]`L@D3u"mFKsAZW[h(,aCY`/d6*WljHp_MH<@MG2dK-*NHqsN;98JoPB>X2/7!d>qmruSjm9YI]53HdVWST5
%nU1W+NiA4<@JW^9'L:AphpA+j=dm<Ah/jWhFN&Dt6\$R"D9K;_Eb8X!pqSEs2M2:OJhT?YIEFjK[V"4@"?<V_1d6,p,=$&HCtk,q
%_8'<69tP7(NW_)BQW/$'<J+iPl(/9`aj^'cem1%R:>XT>>6(]J8/AF!.h4aEK&Yr#&D4AqrNW/qC*Epn,qFOIi7kgT$T]C_9UgRk
%k:rXlH?o^Ip#%j?0L4uL2Ie?Dr!<p0Zf;<&dM\@Ek$!mfY%9=s(lmnnaE'J`6%L!Om*cMf$p"speoTKQNXgu4[,AQt-arKR'[eQF
%U=Etd*\F:X0!!6<akk'9!IK%8i(K(6KS&&`ZoTK]&3p(t"cAN$1WqKqX9`0c<Xj'>CBW.Hk_]qeYc#A$0d**9+2kb,Vp"[[.fp'M
%)gRE[+!i=W.K!EWqK\PT]$"Z[%Qb[Se)QD1pY\Ppp]=i"M1"S+4lq(7#p9Zo%<g%*)/gcbQ8/Mt]F5P]l\]W5S.V3gS-%cg6KUB@
%^*$]9*CG?LKW;1b)H+,-cnI/uF!?][Bcd..1<ENRpaRa+Q2ri5#`B6Z[cj.%iD=.Rj=M(3JClL93ZnQF;k^?_(EEOTia_2L-'WuN
%)kL.@,&F'l^'d6XY:<C'%#sI@C(N;4`jV*4@jJAbXZ-gDUS*M>]XJYIcU`Nl7.i.YcRc=@.O%'I+C:P1Ycq/>/LKgk083oO=!gO]
%efiN5*@C)0caO%].Y/`&>heQF/^<JLe74SXRN@0U=bK%udF^RL^nN\j!39"A=FCV-l/r$bTXRg\a]/2nGB>$UFj">R]"UhVZ0e$X
%!&8JpqhA&[=GB<3,A=q_`\'TV^DIa`P_0$K5Z[`a*=KaIL)Ih#?O$'-J2H"k@fu8iOZm!`-:3r#T!$aE3K[@FAa9s39f]'gW"=9^
%HOB8-.'FbGFj%7IH)XB.:^8C)-=LS&:mfh*3b,s,$@>1gKn\fEKu6k,=#4q!X@C!5F,HS?_;KA<aL!AFM!ZSs5]*_V[_\A7LciuV
%NQ>da]7P>G*A,?YQY=#UZ$bJ0>*Q*@X>.VKI,<>K)"9De5^^@PcDF:Y+DO#jVJZ[O(a6%1o;)VbKk^7t&d/c3X0`"doV1%?/4%`@
%RC&[3N3uheFeu)BR0A2-fN]E+L.5^,:c%T\)g=Df.A.c]D[(cC_<M(igP;blbJAq=.!(.-1b=DI9`"t6+T0d!?k&N9!*'?$]6^h:
%a*(.=JKk=-bE*T)Nki+L7ZVis'p?pom;UTA%i@Iq7u5!gq3iVWSoZVAD8c2\\/k3Cdi;:9LMW2)#uI+&3"j.X?;aKb<=RAnj.iVi
%MYs,:5_Eq%E/=s1-qaj0M7aoRh$[=.OX18nXsc2#jAX#U%(d1q&d/Zql2b1[F&GhYOWL/t3a=]XcAN7C0a6jZXBA"8F%@b#Q%b-W
%>,K3GWJ??LrK)XI,t=/MYep4Mo50]BB3Ff._j+\e&1)mGC[s(na%?aLOXB;fZT.V%o2\kDW6T`4S:"2RiZ*RPA"3$%!s;*SHq#nc
%MaFkqk/1ak-g6YC=@9/^0Z3Du7Qjg:>&fiW%1YF.HVku3YTkBo%#f=iGJl>big1e>e0ttr&1D%&#&1r]>XQj<8DcO^CQ@ThTn@;8
%9kPC\D'4Koa'n'858#,pG(b=e6'+R)5sNmO8OXn7eQic]*@;7rZ(0"N-!6XpIKkIIO0o>K]"pS<*Qo56.Kt6m0gsYfPfB//(_WkO
%L""Cb!MX-!D;UZ%Tg):^bh@,c4T_#me[bnqXZ"%R@'X()6ZhY19JBe.*]1oLUMrASc\65JA@.)*F5c/+Q3?.RUXm-^C6h9p"cBCW
%4SGrNP%k(QR;6IYp8Ku!e/C_/fLCUmJPL.JZ!bAb'QqEGY6<F!h38U$;QECR)^m^%aE/^'F!VZNXoO:]!&b$B]uc\2l^<\7Y4%0S
%<<@l*KqHD9\mmP?@qHGI!$+3X."#k=lrX8q4UODTK"uJ:*HTTfHO;TP1Q+,224j18KM9FQ'bLR#^SdTsF2^ss@,W?KI'X*H-N>n*
%9j_to8@Y5S;?o0q_QlVE5e<[]L1lFleWfif88<p?>D>C5F8;a)1fr3MY"C5&X2;#iNGTP<QUXI_<oEH\$ZW3%5][T(f^BSe669=N
%%+@>]2+5[9,$#(pM!GaANBOt6!<`#Kcp8s6/5b!6^iV/q?Nq]B*7k<;CK6%tL*pH'Bf_n4Lm@ML+uC2j.NPm(S'O&ELQc.N;JdQk
%2B$$jhnmNf&bM$hU`)GKhQ[FO[P5@_KY^,5FkRJ0=D=I$_rD+>aM@^jiBd]JJi_\=g&rf@Sq'u=001&b1<.&I7KYP%FtP0Z%O%c&
%3ms1#oUIr,T`!2Y_,*91_/Ln*W;BHk,_4hd'g@ZZ)93FF"3`p67Soqi35Z!/QU%]^lN2_AZG<JZX@PA/%t%r5`!NFT#R)SpTBUH[
%L`e_QW"Mo_D$E&88%[b:ScoZDjePns&0]aB_tTqf%-hOs;;g(JJP;'Ha5FiH$Ku"*c7:1hcp%A4$&763GEQIO=)q-;HZ[G`)@/A7
%nUuW<4U+q3T]K>eG=+.G2[8?8HWo@q<IqSI,sbPtOqO!Dmf>f5K84V+=faN!,bLY1!D$!,D"P-pd4Cl(HGn_BL`@<U`708Hd=Yb%
%0Fb!$N7@K%D*T(n5eQimeWQp_<Ahin5G8^F/-,Ie"%A,i4fk'A+Hj1#+q0^a*M%N6Ltb%FR,cIMj`7S[Ct`s;/TmOJ-=-!=R@lLC
%ShkQk#AMM$pa/n2k)^#ZOH&c9KSWUDj\Ug0XY!g.LV@c&iS,\D64P0oZb"JRis\=/N,)&Xf3eV55;1YHL&fUu=NH06Ej3#UmrTIt
%+@;%P-.PsoeR3@kakS!-$dn7=kL.gbeeT+uG`([)cZ?U`n2+*#,)aa?HX/0-MMpZ%Ek\7E&d7jTCn:H[)2K1Qn]cfr"VV]\.P)Fd
%GT=8!3!NJ=-AU5U@;Q!3-_G_#*r3Ys+E\=6s7cX`s#>JOg^N..E4Gd1>VNu[HW\RJhJ&:_?p[Cd0Hh8a(n5m7_M-oe(SJ9G>\`8T
%j^;JV`Q1do#3&b<A=$7GTW/3'M=21dBUp^`c1e`3QhkqdaBZ4("TtDeS=CGUi^cE;LoJ/+;"1!7.\L31S]X(;[Tq^V+P9WV=_=9]
%0]^/scq&k])FW^0JY3oDIDGjX<07Y+1I.h8M%D`SVeS]2kXA*h,iU4?J:6Fg.7jXWA;:CGbZA.)-q^Z#F!W6\7h>Aer6rA';635P
%R/8;N6BDMJ-trG#]hJ,PV$4Fk$02t?7Y='51kRqY!39"A=FCUb$qhY&D[+(4Y:k">gP3(Qd#Fnm[L,&_l%rJDc3C`DRaV$>+^oeQ
%TKj?PH`bh+YeEFP=C:QKVp"B6KY-Y@,e7h#rF=qW8s/cm+Q<1^S_pFc'TPF`*nA(GX&17Flc;53!hKcN_DTOC`4;<:,(nFEUR9ZQ
%fsT1AaO\aWA9sC[!0@SY:9#n!KN:O'oe*<t(dlVO9.C!rB.S<$A;^Pk8KbSj4R2HX2+Q(5U]GLEJR3&M0.9j23'R##KscVr0Ye6Q
%"e]"?7X/ddapqVjG!O]lTNjI2TXLGsQ;dtmgfPCS@>IU8OsUlt_=@uLOD,#n/&C^r,oCqF1pCs>6dLXj(EI/(/&[iGLn3YuocZ\=
%^`pkNRogV6Q"$f1l4s4t@6%.Q%+C;Q$R)3D&S/Q_CCA//1Y._H!.g1s6T[sT#?[0T[bchlbgAkm7NN[V]nA9RT*\OnkOCE<D':0e
%Q%NndM7'Tg.CL.r?En]?\SqsCD*;A\W<aUOTV=N-*F4Q'a2W?i;kgo6)O8@m2beLe#isY!N(jG+KmUc$K#\ne(*T+]BpFE4E2Z0p
%GbBcD;E:'K3T02=O9uSO<__k,&3s(%0l2p#AiT>kkS\/-7=]@M\0u`!6"&:MkaPhE1+>s`K*uLi!Y@mY9L5o+O@pgW7?D6N<=+>$
%"q#<MCmU\TOWh<ClQf;mO,&Cr&WfC;+lq'R-\Uho!iU.X+?F_LA*[#QRi]c#-7i(^/:+Zs^U.6`(D)](?Zdi[Jf[#OPSkUmV/sNO
%cjZU8n<s!g9=[/%dmfsm]J<TrO1Ylp.W:_nR!gK9L<IOICg)VdKEY?E)@;[F0"$=$_A+,VK0d*RZhkcln0A9f:o;-R,6qWX0_u^%
%0!bN__]2(4`b*aV9rT*@JY&E!AU*JnNYFI2_7Z8semJi^@V*T19[_nASZ0dO!F=)0//8sRX[:&[7&N/K(I4<Y:n]V9qD?'s7R>Ms
%XWGj\FBJdd*a,ph7-a.'AdnI'\]X^#\bYU:GEOpQZS'*G'!SfQl2$pWYYRNij20D8H=LVM:6bpoQ\obS.Z+cA/s1Dq5Tr&daPo0f
%BQY"W0/bn5eVX"d0d_oqZ*'dUOK7<28NIOWR3AC8l9`5L#oJE,(kFSt<<6R?L*O&2hZ[-72,Ktdb%t#o+0:,!1]]\jE.!L_;$*'u
%6l33M+UnWO0A%G:7oOME&d\NcWN@Lt0H^I?9g$5,A"R=k?DTh39?0tX?\"e&-?2&%`CueNLS$[(YRj4DV9Vg51&t0,'=StgkN@j>
%PVp%+9/2qf@VXj&M.8SU.1AVP\`St,O\S[,QuYhDn*,U^A\%r!A&fuDc(u(JS:!AD^0R:L7npnb72WYV[QK1]"DBYP@PO%#_A*g<
%bFT"0=X^8HVQ'igEIfPOVU(8n\T<I8WOP'N'9cS'8%p#a9A#mA#X.?IM$t:202F'1JY;U_>+8rp:Ip"<X!LbIWbRVV&Ws%3ieE2J
%")VGDqsoIO6,L=V0h_;L$55Yl`Ek@'cT;l1*?HbIe+^0mNsma:!RlmRJ\fp?B>n<3$J@Hm84lTtj07IrYV.IWm#)3tc%&g>fSfj.
%*M+t91)LbjP0d>6<>=92Oou/^+iK"-&7Pn`(3bBU7YA#US]2A;\S.*gV?8'[%?&&%)G0eRRArh\Uo'@+WB2r$#n^::'HpUjBY;g*
%&]%sQp^S&B%9>sBECh;lQ_n9J+\3Rp?+C`OLp73CX=cY\_+nDfoHhqnNJIa+_@.Nf&Vd#gQp.ZK49;]Y'IjO;o3obN/m92H,m%'6
%B/+QKoGa;/'`TGZ$A6?ti6bDQn?A!G4m8b/F\Ia[2`sl$aChYm7S5BRR-5QBhqVUG9V$)HS7eI15Qgc`7a[DE']S+1R&5WK?Ca&Z
%%6X:Pctn4UCHeGhJHmRL)\5;rI$Z%m71!*JO,t"d'8,;cG;djH!4%,&O@$\).^q-%%hY#77Q<!i0U%pAAHt#N6/j5nfqj(^*4-9g
%)'6d?Gk<e_T(AEi:#GGF9`$#VA!-qY-QZrq6Q-eO7[.Bn<>Au!5j]gT!t`g/=aOO8q1q#E-.7d#kP>D[%`sBS8"4SaGo._n0/,NB
%55C),Ss^Ks7EMe7Bas4Hf*Q/6)Mi!WM5HL.02/DkAtk+h/1`tI<MC]m0qne!kRlpAbVtu'6rkFk!B*V+Pe*I2?18,m22jPCPl9WT
%1eeQ&j#XB6KKA,,Y]N?RgO`#e1$FYC&IB\6YD?;fq2.[Z##B_#[Kf?V.XjfrSH0o*:VLm8JYnfG>N@lC"lXYBZ3Q1o&?1Y342fi#
%HduPQ+:AYj0R\)$OR1D%(04>;2<&k([(L7sCcfQd$l5ROHO^8G=RdN2kL.`@n7r2^1)&8qKX!lh*Kus5%MA;&GOUjQp&q<^RalQ4
%Q-'9@Oetd"Zj?JfbEAS.LIMFT+NEF;4r]7@o)(Lg2M1>-Y0E8oO/FH5!OWpKK)0:*_s'=hS.0g=1K_Mik+fF&+A=Ve+b1^a&B`!t
%:r6eo?q>Y'Etp+uq0Jo?NT">siChX&'/<qPOWisq*/Nc_%a>n(5a,5?+Nn2>#14i)4?7@l^!fE6_tV,JkeMD0g#1k(,XO&W`Pt_j
%Q2r%Y0SsK$<scsT.m/&68PTn)/"e]qKfCFkZ96SP+KS@+SPh$$O:4PN-!Rr(UsjB$>\jEhO9p6mlV8EHCmjd&'o8;2*El!C9SW9*
%8\6ZDpbeP7kk(l0C>OKrG7:%=&)&)42MiF'C]T2=ORG9.-%J$I*g[peU.p1[IK<kn&dTb5*^,`".^Ljs$f15ZUDtb?h;_mCe`Re=
%Pod2\"pB+9BZ.53RXA!&rF4bh^D'lR`+&&LEiGcV+Q3l!$k46u<_lgtE+M;e,_o!$k<qtUVoLM70aM<>_?+j.KGS0\jE?U*";aiA
%JK`Mg:npO5,gsXTk@;"%nN<7.:s`'YLaE6#e>j7I$_r2V<<"Y<?@XT4pnV.[f0P/r^%oHa8IP#4$+ci36A3$lL^%&XoJe9NLMhH*
%:XDTpRdZ</E?amXF:),.46U>A0J65_BMKL.=E-Wo=tU7'0J(pCR!4&uJ2Ye23Cjh4/F%2.qFooKn/)Z[OGb/)KJ^TT"K4^TP!HK4
%V/d`4)0_)UJ\Z_W,G,lRhaE:=UD'Y[%SK0LFDAU3LlR(`k(MhmB-l;d1L'ua5m+Vj8uf9t<J.J#(r`:U#3Wnp*#@>H%eVhQiuNN2
%<a\e:6O$7'5_Q'),T_\*6jo^oo>DC2#+@MC(AB\s>R4d/MAnheU#drFmeJn.fi*OMB30:%TZIfd0b9/Q:gH1Rp1_C3:89UA"?9GD
%OA&"\>dUkPqua$9>FH54O'GV6BFG?J8l3e89Aa6E\XlU7Dg[2?HAqd!=,MYRCgCChG`j8?2^KltRf[tKBb$^Z:HZa"+bhb&,aX*J
%1^VFGYTd#,5U7>)*=:3m&iOr6#p\R\qj*ff+f0UQ+os_IUR+KQ&p!uRF%RC?6]ZY$MeGQ[l%[5F&3Tq@JS8YaCE&R=%VuNtP\(53
%+m;oL/k3"L_e.EM/I%B:E=rT9nL:`j*$PqW]E$%E4I<HJo'A]I)?F-uT`GrQ7!B'n)`0;VGCiUr^a']4BA8%a8E+;?=(enh0P^Y3
%PFb'ZLn8rL"&^\jm]4.W//DZe)'4Dq;Y!?]Aljb7"0=^=Qpa'N&0VIGA_B+P\'].\%[+*Fi;!r$OB@un:>atYTH:es!'%DVZP<q@
%?16K0hB[d,eO/uX&9Q<&.+[Nie>c;JjjFI[AN&'Sj'8f%Cf8:GD,uDIO'qKOHOeG[n`c08=:Pim9h0dhYL@-\1lqJA-.&kJ5>i!D
%'$\;rD8[35AkBC9X(m`O@>%Qi;`A;?!`Gj)-epKqrP6@JCW5sP-3P>?c]\+V&@i@jAYsGZm2IT6:tI7&JE375Pd:GML43#J$5%EI
%jiK7h%h(2"(H2Bf4Lc6)A2m`2=A(+F"M1Gu_]j;9R>3L1Y$oM\'L:0:I"qr>Yg8T-3'Rc>Q,FcK>R7T_P<'!1p&d!b9))WtMOuE7
%=.8qM?#rP:N%Up(Es>?k`]],$@0C%$K!KJ\=psGUAU-+b#T]):/LWX?[*A,$X4Bi4OinEg3CM138a(n2%PqHDcM0+C&g?8]UTE2>
%Gh`;B[m<;HdO$e5X3l0Ad8;8XQto:Ql9s!m*[Xc(NW'+&6Oto.6?"sTL_`LA<EY8<mW?LI8'PGJPE'lEbEn1<,Y)#X.a\o#b;H,:
%5!P+Kq8$98&->4T/OO]mL(g8K3g[Zr71dO]\:3f&Te`4C14930k-N2":f">"O<'(]l+qIMbd.:?F85J#*KQd.4)FRDL_>4X'T;'>
%#kP5>2Zf*V<`1N]WZ'sG'MsWZS7ee53?!mrETk)+<6X?9)*.ZI>^7V\f+"mK&r;^fVDj<ajmYGJbnO6hLlb)!Wh*2?i+n^t772]]
%%?:`We,g;,VuSSm(^3M)(8cD^oF\63OMi.XJB^N*M55fDK>XJsV$N3&K&o8D`Y9)P.MM+-#[6lU>:erP>`g-Y!m.(..C7[,8#)S.
%cUJFE"J.0^TjS9QAGVT4q,F#E__48RK?skHFsA,:%L>p],Bb!-3J=p4a)n9nq32#a'!;9CL.@Dd=?o!S,;f:3lB5cf&>_,i<!ga9
%oYr9\Gr0XM@n?E#E/ph8Jcu1.Zrt0HM\(_qC_7Oah\IB!Kdb')a"mC8emDDdJhY!h04/2k1j*i97R5E<m>rduD)]hj0j5VAFup:Z
%*$)SEU%.GE3.r;=++eEfj`HjGr'Zum0L]9#n4]@#)M/GV[7G-m?QS9S&CRS\>64r"!XO_8P00IK9k08P!Y,6OBX"hddKW<SX=T89
%M1o+*+p>R,!"gMT"T<[8a[=EadKL.l0PJMBRp.:&oVmIooZa8N@M"RM&'Q\5%O'Y99irMZ#fKj[\Z!J['^"+3"02RSktMWNr]s<g
%WQuks063\^X-9]j==as0;:m3U(CSF&!b:p?kT)!f(]e[ArC6Qr#b(B`O_P$K%?/@paL/SWMd86^5onjHA20BL/$u;\H(Ls1ccF"8
%<0KQ_3/S7TRR`*fl#Yjc0Skk.ieA'r7pOtGe%fHA&[D.?QOEp30r/h"T%3_FdD5!7TT[f3?;;CTXfZfG-.Vbm_.<>W4q';5".,D#
%XY6FE+iG'3-5Q^AG"S_/)'2$8%5^;eV9)Yf7VCY9\Lg/C.Bm?OUD0$#"1sP.IYJlaUepY=XFU1g3Gqq]CF@L,"=Vdt"H[DJ=<$i9
%EQuh6q%:B7q&)(dM%;F-KA?@Dh4$g-1E7Gk,A;ONN9f/[L5:VN1c?o3r!\Xa2$fWmSeKRhs$603I%EYEBRU4ig`aQm5N8it7<Pi'
%&Z:D"IKm7#[:-)_i@&@^[@m?SoJhtR+iH6&$0%C\n$9!o6+2F9(c9SR\E8R>j[l0fqIs'?0!,7(d-X3F%nXT2p7Rr!'0Lj]/g=Ql
%lg78D%C-FT@[)YaIEIol=X,%\Au;5P_8[hqgg]kI_Wh\A#D=(Kp@1=Cf<M,l,%TrJL<2lYguIef1r!;r9q$K2V>^"q?rqj_]gASG
%IBE]1l46,k\@b8<(S)W:b+S5aT"+!-/1>Thr*0Oh1n$3-'*"a5Td-$?c#\".U(jotQ)J+OLPg6^&WS23.I:Q2gs)U]kGfF'%?'$-
%bIbZo!>G7-j[N3+"AOXj+4S7^K$7Y:OR#.l1T%05?B4=8+p>S)Oc#H0/qhlgQOr:g(W!>&GUuHSE7J@S@M_=BRik+Zf9ZRU4$j_;
%d=I2r_,,VL(H_>E]:55[(.ZR=90sH,8/5G@Y?och-9m<o6HEm1D8BKD!Z674Km?UKik-^*R!?fP_*O6k7F8=L;;*5T\0<T3]RU$<
%dM>*kj6$bKg>_q*`T]Xa.,K><A).9%CH97?"tPHFEB/b%D=KY:RSP(t>E"0@%?[>.`,9#pUoaWNdT-@YZmDED3qk`JBhN?3j?%oc
%>J+UjjDGMYD=PUX1H8eg;A@0OdCB[^/^d&]-)liCUfQF.,LR?GF0W9>QqLYN#_#I_V(G%+PW4c5#^Q@'O@rdc,H#BU"BRD=oPeN&
%ER,tuhGfAqMZNt_KLoBgK</WTj[+br>7'<;[WgD)eKC'ajE@dnR:Xg4>_p?^-rep[Q")YO3a;t$L7sHUQ'&r3,lJ,pLS#U8'eU\8
%g@k69WWnlu`HYnK(E!kX*90c;W:N7SfnMg)4a^L9:k/a5TTVN@Ji_0;Ne/N86%grO!_jc+GdBi;6sF9KF.jS?A,r#g38:<S92c+M
%+T7OUkRp?d!Z_S'p]5KYAN_rV9l(-QW*`IS<?d)BL5o@gUpW[q72$iO(9-ag!!Q7<JN-MY!r9a[Q(Th-$4rT-%741["peqC-@m^i
%TIPL@p!L)g6$SY2,2?Pc@amL\UDp`">ai`gO;FFmP%]?_p&r?c5kq<3L^I>2+k[>61@\6QK\4`X(_T-0)%hN2Vor%Y0[hdt(/@,S
%T*pbjM@`#%_$g'Xq@N4BI@uN3jro:`.s\Llb7DV6GliP5ITYOgSZ1u)^`)9tN.VL;4p;3"dV#*\6&0%C8J&Fj"mO(18Dk$le`3!?
%L?1gZarURm4&,]R=ID<f-jG@tju>2;?s2"S*R*F"%XY5G4&4_tk*isCn<=&Aj*+<ujgGsU-ULem8''d%G-:?C@&Pnls*PmATE%>J
%>khP1L)Rg:"t'MH`\2kZkG[0+bl@bY\eKUr"@J/U!ia0m5[9MnNr,,U"AfGFs%ZD9$-lS]`\1#"W:BW-F&`\/RW&G^/a#D$)"JdM
%j?,tb#S-uiV#q#daRNqhJHn41C542,+CO(XRU4o<0U%f683@/#DROU-KOIB**T9:0*]2#W:f4.L[h6tB,T_V85\eGoLlNPsG;1-a
%JWpB_6uP0oGS'/=/@Zh`5lqnk>Tup[3u/6MO8s;B,XI[(TT"$$#S-u5e+@=a&>D9XJ3k;&J-(eu=[OndX>e`<r4J^Ej9Dg*LpI_G
%GZ7IFZOfFbbsV`!Gq?bnFO4,7i<^81AMNEIB*-0PqH0:5=E*?0@8`_ko:lE#bR,N]fZ%-o8E^P82GN<G%RN]K*C"`Z6'"P.OK]^e
%$7q-*L.IJ08O]b])?e3/-I5g09K30C6H;e[KP\c$K[GLF'f"Z$8s3N3'UWj2cL5KR9J]K);71u^7m-RT<"?f"2-2Qlgu&MZ_1Y0;
%-o_g6$9:,s0I7B-J3joE!;R6STq$jJ_RU`6CCs6"bTnt=GnW'on0ijbJd80@VpQLEA^Q2&FFJXZ=O%354u_HiQ*)6%Odg<]_=-+f
%9K7tt[=$)Lo7G1U_1]^-d6&dc_?n]/9fPr/DkR<2):"Vp&#m&FLRD)4>Y]gZ#q&$oK^2oe<Ahik3*Zb*O*ok4*0&C39K5_^U:32e
%.fh"?n-F%J%S8sio+0%/JLd=qE"V%U>]3E<C65;]P+_"0+BoXh^b[01i:.W_C?i8.0/CS;oJ+=Uq?qR@EHt^_\=t$,Y,IOc'hJIs
%ppT0N[F%S=Zm%(=qm)s9?WL-K/9b-B.po`BPq$nAX^1k*S1W=XND?`WDSe'[[oU&qBsc%9p3Yh<7,S_b4I=e_h9Gk)bplg2~>
%AI9_PrivateDataEnd
